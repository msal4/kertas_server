scalar Cursor
scalar Time
scalar Upload

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

enum Status {
  DELETED
  DISABLED
  ACTIVE
}

enum State {
  PRESENT
  ABSENT
  EXCUSED_ABSENT
  SICK
}

enum Role {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
}

enum GroupType {
  PRIVATE
  SHARED
}

enum OrderDirection {
    ASC
    DESC
}

enum SchoolOrderField {
    NAME
    CREATED_AT
    UPDATED_AT
}

input SchoolOrder {
    field: SchoolOrderField
    direction: OrderDirection!
}

type School implements Node {
  id: ID!
  status: Status!
  name: String!
  image: String
  createdAt: Time!
  updatedAt: Time!
}

type SchoolEdge {
  node: School
  cursor: Cursor!
}

type SchoolConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [SchoolEdge]
}

input AddSchoolInput {
  name: String!
  image: Upload!
  status: Status! = ACTIVE
}

input UpdateSchoolInput {
  name: String
  image: Upload
  status: Status
}

type Stage implements Node {
  id: ID!
  name: String!
  tuition_amount: Int!
  status: Status!
  school: School!
  createdAt: Time!
  updatedAt: Time!
}

type User implements Node {
  id: ID!
  name: String!
  username: String!
  password: String!
  phone: String!
  image: String!
  role: Role!
  status: Status!
  school: School
  stage: Stage
  createdAt: Time!
  updatedAt: Time!
}

type UserEdge {
  node: User
  cursor: Cursor!
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

input AddUserInput {
  name: String!
  username: String!
  password: String!
  phone: String!
  image: Upload
  role: Role! = STUDENT
  status: Status! = ACTIVE
  school_id: ID
  stage_id: ID
}

input UpdateUserInput {
  name: String
  username: String
  password: String
  phone: String
  image: Upload
  status: Status
  stage_id: ID
}

type Query {
    school(id: ID!): School
    schools(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: SchoolOrder, where: SchoolWhereInput): SchoolConnection
}

type Mutation {
  addSchool(input: AddSchoolInput!): School
  updateSchool(id: ID!, input: UpdateSchoolInput!): School
  deleteSchool(id: ID!): Boolean!

  addUser(input: AddUserInput!): User
  udpateUser(id: ID!, input: UpdateUserInput!): User
  deleteUser(id: ID!): Boolean!
}
