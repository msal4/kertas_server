directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

scalar Cursor
scalar Time
scalar Upload
scalar Duration
scalar Weekday

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

enum Role {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
}

enum GroupType {
  PRIVATE
  SHARED
}

enum OrderDirection {
  ASC
  DESC
}

enum SchoolOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}

input SchoolOrder {
  field: SchoolOrderField
  direction: OrderDirection!
}

enum Course {
  FIRST
  SECOND
}

type School implements Node {
  id: ID!
  active: Boolean!
  name: String!
  image: String
  createdAt: Time!
  updatedAt: Time!

  users(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: UserOrder, where: UserWhereInput): UserConnection @goField(forceResolver: true)
  stages(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: StageOrder, where: StageWhereInput): StageConnection @goField(forceResolver: true)
}

type SchoolEdge {
  node: School
  cursor: Cursor!
}

type SchoolConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [SchoolEdge]
}

input AddSchoolInput {
  name: String!
  image: Upload!
  active: Boolean! = true
}

input UpdateSchoolInput {
  name: String
  image: Upload
  active: Boolean
}

enum UserOrderField {
  NAME
  USERNAME
  PHONE
  ROLE
  CREATED_AT
  UPDATED_AT
}

input UserOrder {
  field: UserOrderField
  direction: OrderDirection!
}

type User implements Node {
  id: ID!
  name: String!
  username: String!
  phone: String!
  image: String!
  role: Role!
  active: Boolean!
  createdAt: Time!
  updatedAt: Time!

  stage: Stage
  school: School

  messages(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: MessageOrder, where: MessageWhereInput): MessageConnection @goField(forceResolver: true)
  groups(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: GroupOrder, where: GroupWhereInput): GroupConnection @goField(forceResolver: true)
  classes(stageID: ID, after: Cursor, first: Int, before: Cursor, last: Int, orderBy: ClassOrder, where: ClassWhereInput): ClassConnection @goField(forceResolver: true)
  assignmentSubmissions(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: AssignmentSubmissionOrder, where: AssignmentSubmissionWhereInput): AssignmentSubmissionConnection @goField(forceResolver: true)
  payments(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: TuitionPaymentOrder, where: TuitionPaymentWhereInput): TuitionPaymentConnection @goField(forceResolver: true)
  courseGrades: [CourseGrade!]!
}

type UserEdge {
  node: User
  cursor: Cursor!
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

input AddUserInput {
  name: String!
  username: String!
  password: String!
  phone: String!
  image: Upload
  role: Role! = STUDENT
  active: Boolean! = true
  schoolID: ID
  stageID: ID
}

input UpdateUserInput {
  name: String
  username: String
  password: String
  phone: String
  image: Upload
  active: Boolean
  stageID: ID
}

type Stage implements Node {
  id: ID!
  name: String!
  tuitionAmount: Int!
  active: Boolean!
  createdAt: Time!
  updatedAt: Time!

  school: School!

  classes(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: ClassOrder, where: ClassWhereInput): ClassConnection @goField(forceResolver: true)
  payments(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: TuitionPaymentOrder, where: TuitionPaymentWhereInput): TuitionPaymentConnection @goField(forceResolver: true)
  students(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: UserOrder, where: UserWhereInput): UserConnection @goField(forceResolver: true)
  courseGrades: [CourseGrade!]
}

enum StageOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}

input StageOrder {
  field: StageOrderField
  direction: OrderDirection!
}

type StageEdge {
  node: Stage
  cursor: Cursor!
}

type StageConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [StageEdge]
}

input AddStageInput {
  name: String!
  active: Boolean! = true
  tuitionAmount: Int!
  schoolID: ID!
}

input UpdateStageInput {
  name: String
  active: Boolean
  tuitionAmount: Int
}

input LoginInput {
  username: String!
  password: String!
}

type AuthData {
  accessToken: String!
  refreshToken: String!
}

type Group implements Node {
  id: ID!
  name: String!
  groupType: GroupType!
  active: Boolean!
  createdAt: Time!
  updatedAt: Time!

  class: Class
  users: [User!]

  messages(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: MessageOrder, where: MessageWhereInput): MessageConnection @goField(forceResolver: true)
}

enum GroupOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}

input GroupOrder {
  field: GroupOrderField
  direction: OrderDirection!
}

type GroupEdge {
  node: Group
  cursor: Cursor!
}

type GroupConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GroupEdge]
}


input AddGroupInput {
  name: String!
  active: Boolean! = true
  userID: ID!
}

input UpdateGroupInput {
  name: String
  active: Boolean
}

type Class implements Node {
  id: ID!
  name: String!
  active: Boolean!
  createdAt: Time!
  updatedAt: Time!

  stage: Stage!
  teacher: User!
  group: Group!

  assignments(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: AssignmentOrder, where: AssignmentWhereInput): AssignmentConnection @goField(forceResolver: true)
  attendances(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: AttendanceOrder, where: AttendanceWhereInput): AttendanceConnection @goField(forceResolver: true)
  schedules(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: ScheduleOrder, where: ScheduleWhereInput): ScheduleConnection @goField(forceResolver: true)
  courseGrades(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: CourseGradeOrder, where: CourseGradeWhereInput): CourseGradeConnection @goField(forceResolver: true)
}

enum ClassOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}

input ClassOrder {
  field: ClassOrderField
  direction: OrderDirection!
}

type ClassEdge {
  node: Class
  cursor: Cursor!
}

type ClassConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ClassEdge]
}


input AddClassInput {
  name: String!
  active: Boolean! = true
  teacherID: ID!
  stageID: ID!
}

input UpdateClassInput {
  name: String
  active: Boolean
  teacherID: ID
}

type Message implements Node {
  id: ID!
  content: String!
  attachment: String!
  createdAt: Time!
  updatedAt: Time!

  group: Group!
  owner: User!
}

enum MessageOrderField {
  CREATED_AT
  UPDATED_AT
}

input MessageOrder {
  field: MessageOrderField
  direction: OrderDirection!
}

type MessageEdge {
  node: Message
  cursor: Cursor!
}

type MessageConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [MessageEdge]
}

input PostMessageInput {
  groupID: ID!
  content: String!
  attachment: Upload
}

type Assignment implements Node {
  id: ID!
  name: String!
  description: String
  dueDate: Time!
  duration: Duration
  isExam: Boolean!
  file: String
  createdAt: Time!
  updatedAt: Time!

  class: Class!

  submissions(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: AssignmentSubmissionOrder, where: AssignmentSubmissionWhereInput): AssignmentSubmissionConnection @goField(forceResolver: true)
}

enum AssignmentOrderField {
  NAME
  DESCRIPTION
  DUE_DATE
  DURATION
  CREATED_AT
  UPDATED_AT
}

input AssignmentOrder {
  field: AssignmentOrderField
  direction: OrderDirection!
}

type AssignmentEdge {
  node: Assignment
  cursor: Cursor!
}

type AssignmentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AssignmentEdge]
}

input AddAssignmentInput {
  name: String!
  description: String
  file: Upload
  classID: ID!
  dueDate: Time!
  isExam: Boolean! = false
  duration: Duration
}

input UpdateAssignmentInput {
  name: String
  description: String
  file: Upload
  dueDate: Time
  duration: Duration
}

type Schedule implements Node {
  id: ID!
  weekday: Weekday!
  duration: Duration!
  startsAt: Time!

  class: Class!
}

enum ScheduleOrderField {
  WEEKDAY
  STARTS_AT
  DURATION
  CREATED_AT
  UPDATED_AT
}

input ScheduleOrder {
  field: ScheduleOrderField
  direction: OrderDirection!
}

type ScheduleEdge {
  node: Schedule
  cursor: Cursor!
}

type ScheduleConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ScheduleEdge]
}

input AddScheduleInput {
  weekday: Weekday!
  duration: Duration!
  startsAt: Time!
  classID: ID!
}

input UpdateScheduleInput {
  weekday: Weekday
  duration: Duration
  startsAt: Time
}

type CourseGrade implements Node {
  id: ID!
  course: Course!
  activityFirst: Int
  activitySecond: Int
  writtenFirst: Int
  writtenSecond: Int
  courseFinal: Int
  year: String!
  createdAt: Time!
  updatedAt: Time!

  student: User!
  class: Class!
  stage: Stage!
}

enum CourseGradeOrderField {
  ACTIVITY_FIRST
  ACTIVITY_SECOND
  WRITTEN_FIRST
  WRITTEN_SECOND
  COURSE_FINAL
  YEAR
  CREATED_AT
  UPDATED_AT
}

input CourseGradeOrder {
  field: CourseGradeOrderField
  direction: OrderDirection!
}

type CourseGradeEdge {
  node: CourseGrade
  cursor: Cursor!
}

type CourseGradeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CourseGradeEdge]
}

input AddCourseGradeInput {
  studentID: ID!
  stageID: ID!
  classID: ID!
  course: Course!
  activityFirst: Int
  activitySecond: Int
  writtenFirst: Int
  writtenSecond: Int
  courseFinal: Int
  year: String!
}

input UpdateCourseGradeInput {
  activityFirst: Int
  activitySecond: Int
  writtenFirst: Int
  writtenSecond: Int
  courseFinal: Int
}

type AssignmentSubmission implements Node {
  id: ID!
  files: [String!]!
  submittedAt: Time
  createdAt: Time!
  updatedAt: Time!

  student: User!
  assignment: Assignment!
}

enum AssignmentSubmissionOrderField {
  SUBMITTED_AT
  CREATED_AT
  UPDATED_AT
}

input AssignmentSubmissionOrder {
  field: AssignmentSubmissionOrderField
  direction: OrderDirection!
}

type AssignmentSubmissionEdge {
  node: AssignmentSubmission
  cursor: Cursor!
}

type AssignmentSubmissionConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AssignmentSubmissionEdge]
}

input AddAssignmentSubmissionInput {
  assignmentID: ID!
  files: [Upload!]!
  submittedAt: Time
}

input UpdateAssignmentSubmissionInput {
  files: [Upload!]!
  submittedAt: Time
}

enum AttendanceState {
  PRESENT
  ABSENT
  EXCUSED_ABSENT
  SICK
}

type Attendance implements Node {
  id: ID!
  date: Time!
  state: AttendanceState!
  createdAt: Time!
  updatedAt: Time!

  class: Class!
  student: User!
}

enum AttendanceOrderField {
  DATE
  CREATED_AT
  UPDATED_AT
}

input AttendanceOrder {
  field: AttendanceOrderField
  direction: OrderDirection!
}

type AttendanceEdge {
  node: Attendance
  cursor: Cursor!
}

type AttendanceConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AttendanceEdge]
}

input AddAttendanceInput {
  date: Time!
  state: AttendanceState!

  classID: ID!
  studentID: ID!
}

input UpdateAttendanceInput {
  date: Time
  state: AttendanceState
}

type TuitionPayment implements Node {
  id: ID!
  year: String!
  paidAmount: Int!
  createdAt: Time!
  updatedAt: Time!

  student: User!
  stage: Stage!
}

enum TuitionPaymentOrderField {
  PAID_AMOUNT
  YEAR
  CREATED_AT
  UPDATED_AT
}

input TuitionPaymentOrder {
  field: TuitionPaymentOrderField
  direction: OrderDirection!
}

type TuitionPaymentEdge {
  node: TuitionPayment
  cursor: Cursor!
}

type TuitionPaymentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TuitionPaymentEdge]
}

input AddTuitionPaymentInput {
  stageID: ID!
  studentID: ID!
  year: String!
  paidAmount: Int!
}

input UpdateTuitionPaymentInput {
  year: String
  paidAmount: Int
}

type Query {
  me: User!

  school(id: ID!): School!
  schools(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: SchoolOrder, where: SchoolWhereInput): SchoolConnection!

  user(id: ID!): User!
  users(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: UserOrder, where: UserWhereInput): UserConnection!

  stage(id: ID!): Stage!
  stages(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: StageOrder, where: StageWhereInput): StageConnection!

  messages(groupID: ID!, after: Cursor, first: Int, before: Cursor, last: Int, orderBy: MessageOrder, where: MessageWhereInput): MessageConnection!

  group(id: ID!): Group!
  groups(userID: ID, after: Cursor, first: Int, before: Cursor, last: Int, orderBy: GroupOrder, where: GroupWhereInput): GroupConnection!

  class(id: ID!): Class!
  classes(userID: ID, stageID: ID, schoolID: ID, after: Cursor, first: Int, before: Cursor, last: Int, orderBy: ClassOrder, where: ClassWhereInput): ClassConnection!

  assignment(id: ID!): Assignment!
  assignments(userID: ID, stageID: ID, schoolID: ID, after: Cursor, first: Int, before: Cursor, last: Int, orderBy: AssignmentOrder, where: AssignmentWhereInput): AssignmentConnection!
  assignmentSubmissions(assignmentID: ID, after: Cursor, first: Int, before: Cursor, last: Int, orderBy: AssignmentSubmissionOrder, where: AssignmentSubmissionWhereInput): AssignmentSubmissionConnection!

  schedule(stageID: ID, weekday: Weekday): [Schedule!]!

  courseGrades(studentID: ID, stageID: ID, classID: ID, after: Cursor, first: Int, before: Cursor, last: Int, orderBy: CourseGradeOrder, where: CourseGradeWhereInput): CourseGradeConnection!

  tuitionPayments(studentID: ID, stageID: ID, after: Cursor, first: Int, before: Cursor, last: Int, orderBy: TuitionPaymentOrder, where: TuitionPaymentWhereInput): TuitionPaymentConnection!

  attendances(studentID: ID, classID: ID, after: Cursor, first: Int, before: Cursor, last: Int, orderBy: AttendanceOrder, where: AttendanceWhereInput): AttendanceConnection!
}

type Mutation {
  addSchool(input: AddSchoolInput!): School!
  updateSchool(id: ID!, input: UpdateSchoolInput!): School!
  deleteSchool(id: ID!): Boolean!
  deleteSchoolPermanently(id: ID!): Boolean!

  addUser(input: AddUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  deleteUserPermanently(id: ID!): Boolean!

  addStage(input: AddStageInput!): Stage!
  updateStage(id: ID!, input: UpdateStageInput!): Stage!
  deleteStage(id: ID!): Boolean!
  deleteStagePermanently(id: ID!): Boolean!

  loginAdmin(input: LoginInput!): AuthData!
  loginUser(input: LoginInput!): AuthData!
  refreshTokens(token: String!): AuthData!

  postMessage(input: PostMessageInput!): Message!

  addGroup(input: AddGroupInput!): Group!
  updateGroup(id: ID!, input: UpdateGroupInput!): Group!
  deleteGroup(id: ID!): Boolean!

  addClass(input: AddClassInput!): Class!
  updateClass(id: ID!, input: UpdateClassInput!): Class!
  deleteClass(id: ID!): Boolean!

  addAssignment(input: AddAssignmentInput!): Assignment!
  updateAssignment(id: ID!, input: UpdateAssignmentInput!): Assignment!
  deleteAssignment(id: ID!): Boolean!

  addAssignmentSubmission(input: AddAssignmentSubmissionInput!): AssignmentSubmission!
  updateAssignmentSubmission(id: ID!, input: UpdateAssignmentSubmissionInput!): AssignmentSubmission!
  deleteAssignmentSubmissionFile(id: ID!, index: Int!): AssignmentSubmission!
  deleteAssignmentSubmission(id: ID!): Boolean!

  addSchedule(input: AddScheduleInput!): Schedule!
  updateSchedule(id: ID!, input: UpdateScheduleInput!): Schedule!
  deleteSchedule(id: ID!): Boolean!

  addCourseGrade(input: AddCourseGradeInput!): CourseGrade!
  updateCourseGrade(id: ID!, input: UpdateCourseGradeInput!): CourseGrade!
  deleteCourseGrade(id: ID!): Boolean!

  addTuitionPayment(input: AddTuitionPaymentInput!): TuitionPayment!
  updateTuitionPayment(id: ID!, input: UpdateTuitionPaymentInput!): TuitionPayment!
  deleteTuitionPayment(id: ID!): Boolean!

  addAttendance(input: AddAttendanceInput!): Attendance!
  updateAttendance(id: ID!, input: UpdateAttendanceInput!): Attendance!
  deleteAttendance(id: ID!): Boolean!
}

type Subscription {
  messagePosted(groupID: ID!): Message!
}
