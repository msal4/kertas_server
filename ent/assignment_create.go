// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/msal4/hassah_school_server/ent/assignment"
	"github.com/msal4/hassah_school_server/ent/assignmentsubmission"
	"github.com/msal4/hassah_school_server/ent/class"
	"github.com/msal4/hassah_school_server/ent/grade"
)

// AssignmentCreate is the builder for creating a Assignment entity.
type AssignmentCreate struct {
	config
	mutation *AssignmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AssignmentCreate) SetCreatedAt(t time.Time) *AssignmentCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableCreatedAt(t *time.Time) *AssignmentCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AssignmentCreate) SetUpdatedAt(t time.Time) *AssignmentCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableUpdatedAt(t *time.Time) *AssignmentCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AssignmentCreate) SetName(s string) *AssignmentCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AssignmentCreate) SetDescription(s string) *AssignmentCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableDescription(s *string) *AssignmentCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetFile sets the "file" field.
func (ac *AssignmentCreate) SetFile(s string) *AssignmentCreate {
	ac.mutation.SetFile(s)
	return ac
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableFile(s *string) *AssignmentCreate {
	if s != nil {
		ac.SetFile(*s)
	}
	return ac
}

// SetIsExam sets the "is_exam" field.
func (ac *AssignmentCreate) SetIsExam(b bool) *AssignmentCreate {
	ac.mutation.SetIsExam(b)
	return ac
}

// SetNillableIsExam sets the "is_exam" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableIsExam(b *bool) *AssignmentCreate {
	if b != nil {
		ac.SetIsExam(*b)
	}
	return ac
}

// SetDueDate sets the "due_date" field.
func (ac *AssignmentCreate) SetDueDate(t time.Time) *AssignmentCreate {
	ac.mutation.SetDueDate(t)
	return ac
}

// SetDuration sets the "duration" field.
func (ac *AssignmentCreate) SetDuration(t time.Duration) *AssignmentCreate {
	ac.mutation.SetDuration(t)
	return ac
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableDuration(t *time.Duration) *AssignmentCreate {
	if t != nil {
		ac.SetDuration(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AssignmentCreate) SetDeletedAt(t time.Time) *AssignmentCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableDeletedAt(t *time.Time) *AssignmentCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AssignmentCreate) SetID(u uuid.UUID) *AssignmentCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (ac *AssignmentCreate) SetClassID(id uuid.UUID) *AssignmentCreate {
	ac.mutation.SetClassID(id)
	return ac
}

// SetClass sets the "class" edge to the Class entity.
func (ac *AssignmentCreate) SetClass(c *Class) *AssignmentCreate {
	return ac.SetClassID(c.ID)
}

// AddSubmissionIDs adds the "submissions" edge to the AssignmentSubmission entity by IDs.
func (ac *AssignmentCreate) AddSubmissionIDs(ids ...uuid.UUID) *AssignmentCreate {
	ac.mutation.AddSubmissionIDs(ids...)
	return ac
}

// AddSubmissions adds the "submissions" edges to the AssignmentSubmission entity.
func (ac *AssignmentCreate) AddSubmissions(a ...*AssignmentSubmission) *AssignmentCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddSubmissionIDs(ids...)
}

// AddGradeIDs adds the "grades" edge to the Grade entity by IDs.
func (ac *AssignmentCreate) AddGradeIDs(ids ...uuid.UUID) *AssignmentCreate {
	ac.mutation.AddGradeIDs(ids...)
	return ac
}

// AddGrades adds the "grades" edges to the Grade entity.
func (ac *AssignmentCreate) AddGrades(g ...*Grade) *AssignmentCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ac.AddGradeIDs(ids...)
}

// Mutation returns the AssignmentMutation object of the builder.
func (ac *AssignmentCreate) Mutation() *AssignmentMutation {
	return ac.mutation
}

// Save creates the Assignment in the database.
func (ac *AssignmentCreate) Save(ctx context.Context) (*Assignment, error) {
	var (
		err  error
		node *Assignment
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssignmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AssignmentCreate) SaveX(ctx context.Context) *Assignment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AssignmentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AssignmentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AssignmentCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := assignment.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := assignment.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.IsExam(); !ok {
		v := assignment.DefaultIsExam
		ac.mutation.SetIsExam(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := assignment.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AssignmentCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := assignment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.IsExam(); !ok {
		return &ValidationError{Name: "is_exam", err: errors.New(`ent: missing required field "is_exam"`)}
	}
	if _, ok := ac.mutation.DueDate(); !ok {
		return &ValidationError{Name: "due_date", err: errors.New(`ent: missing required field "due_date"`)}
	}
	if _, ok := ac.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class", err: errors.New("ent: missing required edge \"class\"")}
	}
	return nil
}

func (ac *AssignmentCreate) sqlSave(ctx context.Context) (*Assignment, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (ac *AssignmentCreate) createSpec() (*Assignment, *sqlgraph.CreateSpec) {
	var (
		_node = &Assignment{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: assignment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: assignment.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assignment.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assignment.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ac.mutation.File(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assignment.FieldFile,
		})
		_node.File = value
	}
	if value, ok := ac.mutation.IsExam(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: assignment.FieldIsExam,
		})
		_node.IsExam = value
	}
	if value, ok := ac.mutation.DueDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldDueDate,
		})
		_node.DueDate = value
	}
	if value, ok := ac.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assignment.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := ac.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assignment.ClassTable,
			Columns: []string{assignment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.class_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.SubmissionsTable,
			Columns: []string{assignment.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: assignmentsubmission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.GradesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.GradesTable,
			Columns: []string{assignment.GradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: grade.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Assignment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssignmentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AssignmentCreate) OnConflict(opts ...sql.ConflictOption) *AssignmentUpsertOne {
	ac.conflict = opts
	return &AssignmentUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Assignment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AssignmentCreate) OnConflictColumns(columns ...string) *AssignmentUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AssignmentUpsertOne{
		create: ac,
	}
}

type (
	// AssignmentUpsertOne is the builder for "upsert"-ing
	//  one Assignment node.
	AssignmentUpsertOne struct {
		create *AssignmentCreate
	}

	// AssignmentUpsert is the "OnConflict" setter.
	AssignmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AssignmentUpsert) SetCreatedAt(v time.Time) *AssignmentUpsert {
	u.Set(assignment.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AssignmentUpsert) UpdateCreatedAt() *AssignmentUpsert {
	u.SetExcluded(assignment.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssignmentUpsert) SetUpdatedAt(v time.Time) *AssignmentUpsert {
	u.Set(assignment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssignmentUpsert) UpdateUpdatedAt() *AssignmentUpsert {
	u.SetExcluded(assignment.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *AssignmentUpsert) SetName(v string) *AssignmentUpsert {
	u.Set(assignment.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssignmentUpsert) UpdateName() *AssignmentUpsert {
	u.SetExcluded(assignment.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *AssignmentUpsert) SetDescription(v string) *AssignmentUpsert {
	u.Set(assignment.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AssignmentUpsert) UpdateDescription() *AssignmentUpsert {
	u.SetExcluded(assignment.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AssignmentUpsert) ClearDescription() *AssignmentUpsert {
	u.SetNull(assignment.FieldDescription)
	return u
}

// SetFile sets the "file" field.
func (u *AssignmentUpsert) SetFile(v string) *AssignmentUpsert {
	u.Set(assignment.FieldFile, v)
	return u
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *AssignmentUpsert) UpdateFile() *AssignmentUpsert {
	u.SetExcluded(assignment.FieldFile)
	return u
}

// ClearFile clears the value of the "file" field.
func (u *AssignmentUpsert) ClearFile() *AssignmentUpsert {
	u.SetNull(assignment.FieldFile)
	return u
}

// SetIsExam sets the "is_exam" field.
func (u *AssignmentUpsert) SetIsExam(v bool) *AssignmentUpsert {
	u.Set(assignment.FieldIsExam, v)
	return u
}

// UpdateIsExam sets the "is_exam" field to the value that was provided on create.
func (u *AssignmentUpsert) UpdateIsExam() *AssignmentUpsert {
	u.SetExcluded(assignment.FieldIsExam)
	return u
}

// SetDueDate sets the "due_date" field.
func (u *AssignmentUpsert) SetDueDate(v time.Time) *AssignmentUpsert {
	u.Set(assignment.FieldDueDate, v)
	return u
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *AssignmentUpsert) UpdateDueDate() *AssignmentUpsert {
	u.SetExcluded(assignment.FieldDueDate)
	return u
}

// SetDuration sets the "duration" field.
func (u *AssignmentUpsert) SetDuration(v time.Duration) *AssignmentUpsert {
	u.Set(assignment.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AssignmentUpsert) UpdateDuration() *AssignmentUpsert {
	u.SetExcluded(assignment.FieldDuration)
	return u
}

// ClearDuration clears the value of the "duration" field.
func (u *AssignmentUpsert) ClearDuration() *AssignmentUpsert {
	u.SetNull(assignment.FieldDuration)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssignmentUpsert) SetDeletedAt(v time.Time) *AssignmentUpsert {
	u.Set(assignment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssignmentUpsert) UpdateDeletedAt() *AssignmentUpsert {
	u.SetExcluded(assignment.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssignmentUpsert) ClearDeletedAt() *AssignmentUpsert {
	u.SetNull(assignment.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Assignment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(assignment.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AssignmentUpsertOne) UpdateNewValues() *AssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(assignment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Assignment.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AssignmentUpsertOne) Ignore() *AssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssignmentUpsertOne) DoNothing() *AssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssignmentCreate.OnConflict
// documentation for more info.
func (u *AssignmentUpsertOne) Update(set func(*AssignmentUpsert)) *AssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssignmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AssignmentUpsertOne) SetCreatedAt(v time.Time) *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AssignmentUpsertOne) UpdateCreatedAt() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssignmentUpsertOne) SetUpdatedAt(v time.Time) *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssignmentUpsertOne) UpdateUpdatedAt() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *AssignmentUpsertOne) SetName(v string) *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssignmentUpsertOne) UpdateName() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *AssignmentUpsertOne) SetDescription(v string) *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AssignmentUpsertOne) UpdateDescription() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AssignmentUpsertOne) ClearDescription() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.ClearDescription()
	})
}

// SetFile sets the "file" field.
func (u *AssignmentUpsertOne) SetFile(v string) *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetFile(v)
	})
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *AssignmentUpsertOne) UpdateFile() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateFile()
	})
}

// ClearFile clears the value of the "file" field.
func (u *AssignmentUpsertOne) ClearFile() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.ClearFile()
	})
}

// SetIsExam sets the "is_exam" field.
func (u *AssignmentUpsertOne) SetIsExam(v bool) *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetIsExam(v)
	})
}

// UpdateIsExam sets the "is_exam" field to the value that was provided on create.
func (u *AssignmentUpsertOne) UpdateIsExam() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateIsExam()
	})
}

// SetDueDate sets the "due_date" field.
func (u *AssignmentUpsertOne) SetDueDate(v time.Time) *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *AssignmentUpsertOne) UpdateDueDate() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateDueDate()
	})
}

// SetDuration sets the "duration" field.
func (u *AssignmentUpsertOne) SetDuration(v time.Duration) *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AssignmentUpsertOne) UpdateDuration() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *AssignmentUpsertOne) ClearDuration() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.ClearDuration()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssignmentUpsertOne) SetDeletedAt(v time.Time) *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssignmentUpsertOne) UpdateDeletedAt() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssignmentUpsertOne) ClearDeletedAt() *AssignmentUpsertOne {
	return u.Update(func(s *AssignmentUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *AssignmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssignmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssignmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssignmentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AssignmentUpsertOne.ID is not supported by MySQL driver. Use AssignmentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssignmentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssignmentCreateBulk is the builder for creating many Assignment entities in bulk.
type AssignmentCreateBulk struct {
	config
	builders []*AssignmentCreate
	conflict []sql.ConflictOption
}

// Save creates the Assignment entities in the database.
func (acb *AssignmentCreateBulk) Save(ctx context.Context) ([]*Assignment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Assignment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AssignmentCreateBulk) SaveX(ctx context.Context) []*Assignment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Assignment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssignmentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AssignmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssignmentUpsertBulk {
	acb.conflict = opts
	return &AssignmentUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Assignment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AssignmentCreateBulk) OnConflictColumns(columns ...string) *AssignmentUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AssignmentUpsertBulk{
		create: acb,
	}
}

// AssignmentUpsertBulk is the builder for "upsert"-ing
// a bulk of Assignment nodes.
type AssignmentUpsertBulk struct {
	create *AssignmentCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Assignment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(assignment.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AssignmentUpsertBulk) UpdateNewValues() *AssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(assignment.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Assignment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AssignmentUpsertBulk) Ignore() *AssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssignmentUpsertBulk) DoNothing() *AssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssignmentCreateBulk.OnConflict
// documentation for more info.
func (u *AssignmentUpsertBulk) Update(set func(*AssignmentUpsert)) *AssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssignmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AssignmentUpsertBulk) SetCreatedAt(v time.Time) *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AssignmentUpsertBulk) UpdateCreatedAt() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssignmentUpsertBulk) SetUpdatedAt(v time.Time) *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssignmentUpsertBulk) UpdateUpdatedAt() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *AssignmentUpsertBulk) SetName(v string) *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssignmentUpsertBulk) UpdateName() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *AssignmentUpsertBulk) SetDescription(v string) *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AssignmentUpsertBulk) UpdateDescription() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AssignmentUpsertBulk) ClearDescription() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.ClearDescription()
	})
}

// SetFile sets the "file" field.
func (u *AssignmentUpsertBulk) SetFile(v string) *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetFile(v)
	})
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *AssignmentUpsertBulk) UpdateFile() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateFile()
	})
}

// ClearFile clears the value of the "file" field.
func (u *AssignmentUpsertBulk) ClearFile() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.ClearFile()
	})
}

// SetIsExam sets the "is_exam" field.
func (u *AssignmentUpsertBulk) SetIsExam(v bool) *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetIsExam(v)
	})
}

// UpdateIsExam sets the "is_exam" field to the value that was provided on create.
func (u *AssignmentUpsertBulk) UpdateIsExam() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateIsExam()
	})
}

// SetDueDate sets the "due_date" field.
func (u *AssignmentUpsertBulk) SetDueDate(v time.Time) *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *AssignmentUpsertBulk) UpdateDueDate() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateDueDate()
	})
}

// SetDuration sets the "duration" field.
func (u *AssignmentUpsertBulk) SetDuration(v time.Duration) *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AssignmentUpsertBulk) UpdateDuration() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *AssignmentUpsertBulk) ClearDuration() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.ClearDuration()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssignmentUpsertBulk) SetDeletedAt(v time.Time) *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssignmentUpsertBulk) UpdateDeletedAt() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssignmentUpsertBulk) ClearDeletedAt() *AssignmentUpsertBulk {
	return u.Update(func(s *AssignmentUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *AssignmentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssignmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssignmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssignmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
