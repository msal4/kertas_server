// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/msal4/hassah_school_server/ent/assignment"
	"github.com/msal4/hassah_school_server/ent/assignmentsubmission"
	"github.com/msal4/hassah_school_server/ent/user"
)

// AssignmentSubmission is the model entity for the AssignmentSubmission schema.
type AssignmentSubmission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Files holds the value of the "files" field.
	Files []string `json:"files,omitempty"`
	// SubmittedAt holds the value of the "submitted_at" field.
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssignmentSubmissionQuery when eager-loading is set.
	Edges                  AssignmentSubmissionEdges `json:"edges"`
	assignment_submissions *int
	user_submissions       *int
}

// AssignmentSubmissionEdges holds the relations/edges for other nodes in the graph.
type AssignmentSubmissionEdges struct {
	// Student holds the value of the student edge.
	Student *User `json:"student,omitempty"`
	// Assignment holds the value of the assignment edge.
	Assignment *Assignment `json:"assignment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssignmentSubmissionEdges) StudentOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Student == nil {
			// The edge student was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// AssignmentOrErr returns the Assignment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssignmentSubmissionEdges) AssignmentOrErr() (*Assignment, error) {
	if e.loadedTypes[1] {
		if e.Assignment == nil {
			// The edge assignment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: assignment.Label}
		}
		return e.Assignment, nil
	}
	return nil, &NotLoadedError{edge: "assignment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssignmentSubmission) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case assignmentsubmission.FieldFiles:
			values[i] = new([]byte)
		case assignmentsubmission.FieldID:
			values[i] = new(sql.NullInt64)
		case assignmentsubmission.FieldCreateTime, assignmentsubmission.FieldUpdateTime, assignmentsubmission.FieldSubmittedAt:
			values[i] = new(sql.NullTime)
		case assignmentsubmission.ForeignKeys[0]: // assignment_submissions
			values[i] = new(sql.NullInt64)
		case assignmentsubmission.ForeignKeys[1]: // user_submissions
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AssignmentSubmission", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssignmentSubmission fields.
func (as *AssignmentSubmission) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assignmentsubmission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case assignmentsubmission.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				as.CreateTime = value.Time
			}
		case assignmentsubmission.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				as.UpdateTime = value.Time
			}
		case assignmentsubmission.FieldFiles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field files", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &as.Files); err != nil {
					return fmt.Errorf("unmarshal field files: %w", err)
				}
			}
		case assignmentsubmission.FieldSubmittedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field submitted_at", values[i])
			} else if value.Valid {
				as.SubmittedAt = new(time.Time)
				*as.SubmittedAt = value.Time
			}
		case assignmentsubmission.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field assignment_submissions", value)
			} else if value.Valid {
				as.assignment_submissions = new(int)
				*as.assignment_submissions = int(value.Int64)
			}
		case assignmentsubmission.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_submissions", value)
			} else if value.Valid {
				as.user_submissions = new(int)
				*as.user_submissions = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStudent queries the "student" edge of the AssignmentSubmission entity.
func (as *AssignmentSubmission) QueryStudent() *UserQuery {
	return (&AssignmentSubmissionClient{config: as.config}).QueryStudent(as)
}

// QueryAssignment queries the "assignment" edge of the AssignmentSubmission entity.
func (as *AssignmentSubmission) QueryAssignment() *AssignmentQuery {
	return (&AssignmentSubmissionClient{config: as.config}).QueryAssignment(as)
}

// Update returns a builder for updating this AssignmentSubmission.
// Note that you need to call AssignmentSubmission.Unwrap() before calling this method if this AssignmentSubmission
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AssignmentSubmission) Update() *AssignmentSubmissionUpdateOne {
	return (&AssignmentSubmissionClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the AssignmentSubmission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AssignmentSubmission) Unwrap() *AssignmentSubmission {
	tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssignmentSubmission is not a transactional entity")
	}
	as.config.driver = tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AssignmentSubmission) String() string {
	var builder strings.Builder
	builder.WriteString("AssignmentSubmission(")
	builder.WriteString(fmt.Sprintf("id=%v", as.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(as.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(as.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", files=")
	builder.WriteString(fmt.Sprintf("%v", as.Files))
	if v := as.SubmittedAt; v != nil {
		builder.WriteString(", submitted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// AssignmentSubmissions is a parsable slice of AssignmentSubmission.
type AssignmentSubmissions []*AssignmentSubmission

func (as AssignmentSubmissions) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
