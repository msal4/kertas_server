// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/msal4/hassah_school_server/ent/assignment"
	"github.com/msal4/hassah_school_server/ent/assignmentsubmission"
	"github.com/msal4/hassah_school_server/ent/class"
	"github.com/msal4/hassah_school_server/ent/grade"
	"github.com/msal4/hassah_school_server/ent/predicate"
)

// AssignmentUpdate is the builder for updating Assignment entities.
type AssignmentUpdate struct {
	config
	hooks    []Hook
	mutation *AssignmentMutation
}

// Where appends a list predicates to the AssignmentUpdate builder.
func (au *AssignmentUpdate) Where(ps ...predicate.Assignment) *AssignmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AssignmentUpdate) SetName(s string) *AssignmentUpdate {
	au.mutation.SetName(s)
	return au
}

// SetDescription sets the "description" field.
func (au *AssignmentUpdate) SetDescription(s string) *AssignmentUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableDescription(s *string) *AssignmentUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AssignmentUpdate) ClearDescription() *AssignmentUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetFile sets the "file" field.
func (au *AssignmentUpdate) SetFile(s string) *AssignmentUpdate {
	au.mutation.SetFile(s)
	return au
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableFile(s *string) *AssignmentUpdate {
	if s != nil {
		au.SetFile(*s)
	}
	return au
}

// ClearFile clears the value of the "file" field.
func (au *AssignmentUpdate) ClearFile() *AssignmentUpdate {
	au.mutation.ClearFile()
	return au
}

// SetIsExam sets the "is_exam" field.
func (au *AssignmentUpdate) SetIsExam(b bool) *AssignmentUpdate {
	au.mutation.SetIsExam(b)
	return au
}

// SetNillableIsExam sets the "is_exam" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableIsExam(b *bool) *AssignmentUpdate {
	if b != nil {
		au.SetIsExam(*b)
	}
	return au
}

// SetDueDate sets the "due_date" field.
func (au *AssignmentUpdate) SetDueDate(t time.Time) *AssignmentUpdate {
	au.mutation.SetDueDate(t)
	return au
}

// SetDuration sets the "duration" field.
func (au *AssignmentUpdate) SetDuration(t time.Duration) *AssignmentUpdate {
	au.mutation.ResetDuration()
	au.mutation.SetDuration(t)
	return au
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableDuration(t *time.Duration) *AssignmentUpdate {
	if t != nil {
		au.SetDuration(*t)
	}
	return au
}

// AddDuration adds t to the "duration" field.
func (au *AssignmentUpdate) AddDuration(t time.Duration) *AssignmentUpdate {
	au.mutation.AddDuration(t)
	return au
}

// ClearDuration clears the value of the "duration" field.
func (au *AssignmentUpdate) ClearDuration() *AssignmentUpdate {
	au.mutation.ClearDuration()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AssignmentUpdate) SetDeletedAt(t time.Time) *AssignmentUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableDeletedAt(t *time.Time) *AssignmentUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AssignmentUpdate) ClearDeletedAt() *AssignmentUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (au *AssignmentUpdate) SetClassID(id uuid.UUID) *AssignmentUpdate {
	au.mutation.SetClassID(id)
	return au
}

// SetClass sets the "class" edge to the Class entity.
func (au *AssignmentUpdate) SetClass(c *Class) *AssignmentUpdate {
	return au.SetClassID(c.ID)
}

// AddSubmissionIDs adds the "submissions" edge to the AssignmentSubmission entity by IDs.
func (au *AssignmentUpdate) AddSubmissionIDs(ids ...uuid.UUID) *AssignmentUpdate {
	au.mutation.AddSubmissionIDs(ids...)
	return au
}

// AddSubmissions adds the "submissions" edges to the AssignmentSubmission entity.
func (au *AssignmentUpdate) AddSubmissions(a ...*AssignmentSubmission) *AssignmentUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddSubmissionIDs(ids...)
}

// AddGradeIDs adds the "grades" edge to the Grade entity by IDs.
func (au *AssignmentUpdate) AddGradeIDs(ids ...uuid.UUID) *AssignmentUpdate {
	au.mutation.AddGradeIDs(ids...)
	return au
}

// AddGrades adds the "grades" edges to the Grade entity.
func (au *AssignmentUpdate) AddGrades(g ...*Grade) *AssignmentUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.AddGradeIDs(ids...)
}

// Mutation returns the AssignmentMutation object of the builder.
func (au *AssignmentUpdate) Mutation() *AssignmentMutation {
	return au.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (au *AssignmentUpdate) ClearClass() *AssignmentUpdate {
	au.mutation.ClearClass()
	return au
}

// ClearSubmissions clears all "submissions" edges to the AssignmentSubmission entity.
func (au *AssignmentUpdate) ClearSubmissions() *AssignmentUpdate {
	au.mutation.ClearSubmissions()
	return au
}

// RemoveSubmissionIDs removes the "submissions" edge to AssignmentSubmission entities by IDs.
func (au *AssignmentUpdate) RemoveSubmissionIDs(ids ...uuid.UUID) *AssignmentUpdate {
	au.mutation.RemoveSubmissionIDs(ids...)
	return au
}

// RemoveSubmissions removes "submissions" edges to AssignmentSubmission entities.
func (au *AssignmentUpdate) RemoveSubmissions(a ...*AssignmentSubmission) *AssignmentUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveSubmissionIDs(ids...)
}

// ClearGrades clears all "grades" edges to the Grade entity.
func (au *AssignmentUpdate) ClearGrades() *AssignmentUpdate {
	au.mutation.ClearGrades()
	return au
}

// RemoveGradeIDs removes the "grades" edge to Grade entities by IDs.
func (au *AssignmentUpdate) RemoveGradeIDs(ids ...uuid.UUID) *AssignmentUpdate {
	au.mutation.RemoveGradeIDs(ids...)
	return au
}

// RemoveGrades removes "grades" edges to Grade entities.
func (au *AssignmentUpdate) RemoveGrades(g ...*Grade) *AssignmentUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.RemoveGradeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssignmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssignmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssignmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssignmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AssignmentUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := assignment.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AssignmentUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := assignment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := au.mutation.ClassID(); au.mutation.ClassCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"class\"")
	}
	return nil
}

func (au *AssignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assignment.Table,
			Columns: assignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: assignment.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assignment.FieldName,
		})
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assignment.FieldDescription,
		})
	}
	if au.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assignment.FieldDescription,
		})
	}
	if value, ok := au.mutation.File(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assignment.FieldFile,
		})
	}
	if au.mutation.FileCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assignment.FieldFile,
		})
	}
	if value, ok := au.mutation.IsExam(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: assignment.FieldIsExam,
		})
	}
	if value, ok := au.mutation.DueDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldDueDate,
		})
	}
	if value, ok := au.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assignment.FieldDuration,
		})
	}
	if value, ok := au.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assignment.FieldDuration,
		})
	}
	if au.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assignment.FieldDuration,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldDeletedAt,
		})
	}
	if au.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assignment.FieldDeletedAt,
		})
	}
	if au.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assignment.ClassTable,
			Columns: []string{assignment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assignment.ClassTable,
			Columns: []string{assignment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.SubmissionsTable,
			Columns: []string{assignment.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: assignmentsubmission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSubmissionsIDs(); len(nodes) > 0 && !au.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.SubmissionsTable,
			Columns: []string{assignment.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: assignmentsubmission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.SubmissionsTable,
			Columns: []string{assignment.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: assignmentsubmission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.GradesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.GradesTable,
			Columns: []string{assignment.GradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: grade.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedGradesIDs(); len(nodes) > 0 && !au.mutation.GradesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.GradesTable,
			Columns: []string{assignment.GradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: grade.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.GradesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.GradesTable,
			Columns: []string{assignment.GradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: grade.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AssignmentUpdateOne is the builder for updating a single Assignment entity.
type AssignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssignmentMutation
}

// SetName sets the "name" field.
func (auo *AssignmentUpdateOne) SetName(s string) *AssignmentUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetDescription sets the "description" field.
func (auo *AssignmentUpdateOne) SetDescription(s string) *AssignmentUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableDescription(s *string) *AssignmentUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AssignmentUpdateOne) ClearDescription() *AssignmentUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetFile sets the "file" field.
func (auo *AssignmentUpdateOne) SetFile(s string) *AssignmentUpdateOne {
	auo.mutation.SetFile(s)
	return auo
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableFile(s *string) *AssignmentUpdateOne {
	if s != nil {
		auo.SetFile(*s)
	}
	return auo
}

// ClearFile clears the value of the "file" field.
func (auo *AssignmentUpdateOne) ClearFile() *AssignmentUpdateOne {
	auo.mutation.ClearFile()
	return auo
}

// SetIsExam sets the "is_exam" field.
func (auo *AssignmentUpdateOne) SetIsExam(b bool) *AssignmentUpdateOne {
	auo.mutation.SetIsExam(b)
	return auo
}

// SetNillableIsExam sets the "is_exam" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableIsExam(b *bool) *AssignmentUpdateOne {
	if b != nil {
		auo.SetIsExam(*b)
	}
	return auo
}

// SetDueDate sets the "due_date" field.
func (auo *AssignmentUpdateOne) SetDueDate(t time.Time) *AssignmentUpdateOne {
	auo.mutation.SetDueDate(t)
	return auo
}

// SetDuration sets the "duration" field.
func (auo *AssignmentUpdateOne) SetDuration(t time.Duration) *AssignmentUpdateOne {
	auo.mutation.ResetDuration()
	auo.mutation.SetDuration(t)
	return auo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableDuration(t *time.Duration) *AssignmentUpdateOne {
	if t != nil {
		auo.SetDuration(*t)
	}
	return auo
}

// AddDuration adds t to the "duration" field.
func (auo *AssignmentUpdateOne) AddDuration(t time.Duration) *AssignmentUpdateOne {
	auo.mutation.AddDuration(t)
	return auo
}

// ClearDuration clears the value of the "duration" field.
func (auo *AssignmentUpdateOne) ClearDuration() *AssignmentUpdateOne {
	auo.mutation.ClearDuration()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AssignmentUpdateOne) SetDeletedAt(t time.Time) *AssignmentUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableDeletedAt(t *time.Time) *AssignmentUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AssignmentUpdateOne) ClearDeletedAt() *AssignmentUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (auo *AssignmentUpdateOne) SetClassID(id uuid.UUID) *AssignmentUpdateOne {
	auo.mutation.SetClassID(id)
	return auo
}

// SetClass sets the "class" edge to the Class entity.
func (auo *AssignmentUpdateOne) SetClass(c *Class) *AssignmentUpdateOne {
	return auo.SetClassID(c.ID)
}

// AddSubmissionIDs adds the "submissions" edge to the AssignmentSubmission entity by IDs.
func (auo *AssignmentUpdateOne) AddSubmissionIDs(ids ...uuid.UUID) *AssignmentUpdateOne {
	auo.mutation.AddSubmissionIDs(ids...)
	return auo
}

// AddSubmissions adds the "submissions" edges to the AssignmentSubmission entity.
func (auo *AssignmentUpdateOne) AddSubmissions(a ...*AssignmentSubmission) *AssignmentUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddSubmissionIDs(ids...)
}

// AddGradeIDs adds the "grades" edge to the Grade entity by IDs.
func (auo *AssignmentUpdateOne) AddGradeIDs(ids ...uuid.UUID) *AssignmentUpdateOne {
	auo.mutation.AddGradeIDs(ids...)
	return auo
}

// AddGrades adds the "grades" edges to the Grade entity.
func (auo *AssignmentUpdateOne) AddGrades(g ...*Grade) *AssignmentUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.AddGradeIDs(ids...)
}

// Mutation returns the AssignmentMutation object of the builder.
func (auo *AssignmentUpdateOne) Mutation() *AssignmentMutation {
	return auo.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (auo *AssignmentUpdateOne) ClearClass() *AssignmentUpdateOne {
	auo.mutation.ClearClass()
	return auo
}

// ClearSubmissions clears all "submissions" edges to the AssignmentSubmission entity.
func (auo *AssignmentUpdateOne) ClearSubmissions() *AssignmentUpdateOne {
	auo.mutation.ClearSubmissions()
	return auo
}

// RemoveSubmissionIDs removes the "submissions" edge to AssignmentSubmission entities by IDs.
func (auo *AssignmentUpdateOne) RemoveSubmissionIDs(ids ...uuid.UUID) *AssignmentUpdateOne {
	auo.mutation.RemoveSubmissionIDs(ids...)
	return auo
}

// RemoveSubmissions removes "submissions" edges to AssignmentSubmission entities.
func (auo *AssignmentUpdateOne) RemoveSubmissions(a ...*AssignmentSubmission) *AssignmentUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveSubmissionIDs(ids...)
}

// ClearGrades clears all "grades" edges to the Grade entity.
func (auo *AssignmentUpdateOne) ClearGrades() *AssignmentUpdateOne {
	auo.mutation.ClearGrades()
	return auo
}

// RemoveGradeIDs removes the "grades" edge to Grade entities by IDs.
func (auo *AssignmentUpdateOne) RemoveGradeIDs(ids ...uuid.UUID) *AssignmentUpdateOne {
	auo.mutation.RemoveGradeIDs(ids...)
	return auo
}

// RemoveGrades removes "grades" edges to Grade entities.
func (auo *AssignmentUpdateOne) RemoveGrades(g ...*Grade) *AssignmentUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.RemoveGradeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssignmentUpdateOne) Select(field string, fields ...string) *AssignmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Assignment entity.
func (auo *AssignmentUpdateOne) Save(ctx context.Context) (*Assignment, error) {
	var (
		err  error
		node *Assignment
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssignmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssignmentUpdateOne) SaveX(ctx context.Context) *Assignment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AssignmentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := assignment.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AssignmentUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := assignment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := auo.mutation.ClassID(); auo.mutation.ClassCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"class\"")
	}
	return nil
}

func (auo *AssignmentUpdateOne) sqlSave(ctx context.Context) (_node *Assignment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assignment.Table,
			Columns: assignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: assignment.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Assignment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assignment.FieldID)
		for _, f := range fields {
			if !assignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assignment.FieldName,
		})
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assignment.FieldDescription,
		})
	}
	if auo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assignment.FieldDescription,
		})
	}
	if value, ok := auo.mutation.File(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assignment.FieldFile,
		})
	}
	if auo.mutation.FileCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assignment.FieldFile,
		})
	}
	if value, ok := auo.mutation.IsExam(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: assignment.FieldIsExam,
		})
	}
	if value, ok := auo.mutation.DueDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldDueDate,
		})
	}
	if value, ok := auo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assignment.FieldDuration,
		})
	}
	if value, ok := auo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assignment.FieldDuration,
		})
	}
	if auo.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assignment.FieldDuration,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldDeletedAt,
		})
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assignment.FieldDeletedAt,
		})
	}
	if auo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assignment.ClassTable,
			Columns: []string{assignment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assignment.ClassTable,
			Columns: []string{assignment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.SubmissionsTable,
			Columns: []string{assignment.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: assignmentsubmission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSubmissionsIDs(); len(nodes) > 0 && !auo.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.SubmissionsTable,
			Columns: []string{assignment.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: assignmentsubmission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.SubmissionsTable,
			Columns: []string{assignment.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: assignmentsubmission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.GradesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.GradesTable,
			Columns: []string{assignment.GradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: grade.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedGradesIDs(); len(nodes) > 0 && !auo.mutation.GradesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.GradesTable,
			Columns: []string{assignment.GradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: grade.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.GradesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.GradesTable,
			Columns: []string{assignment.GradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: grade.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Assignment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
