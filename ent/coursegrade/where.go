// Code generated by entc, DO NOT EDIT.

package coursegrade

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/msal4/hassah_school_server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ActivityFirst applies equality check predicate on the "activity_first" field. It's identical to ActivityFirstEQ.
func ActivityFirst(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityFirst), v))
	})
}

// ActivitySecond applies equality check predicate on the "activity_second" field. It's identical to ActivitySecondEQ.
func ActivitySecond(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivitySecond), v))
	})
}

// WrittenFirst applies equality check predicate on the "written_first" field. It's identical to WrittenFirstEQ.
func WrittenFirst(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWrittenFirst), v))
	})
}

// WrittenSecond applies equality check predicate on the "written_second" field. It's identical to WrittenSecondEQ.
func WrittenSecond(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWrittenSecond), v))
	})
}

// CourseFinal applies equality check predicate on the "course_final" field. It's identical to CourseFinalEQ.
func CourseFinal(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseFinal), v))
	})
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CourseEQ applies the EQ predicate on the "course" field.
func CourseEQ(v Course) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourse), v))
	})
}

// CourseNEQ applies the NEQ predicate on the "course" field.
func CourseNEQ(v Course) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourse), v))
	})
}

// CourseIn applies the In predicate on the "course" field.
func CourseIn(vs ...Course) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourse), v...))
	})
}

// CourseNotIn applies the NotIn predicate on the "course" field.
func CourseNotIn(vs ...Course) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourse), v...))
	})
}

// ActivityFirstEQ applies the EQ predicate on the "activity_first" field.
func ActivityFirstEQ(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityFirst), v))
	})
}

// ActivityFirstNEQ applies the NEQ predicate on the "activity_first" field.
func ActivityFirstNEQ(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivityFirst), v))
	})
}

// ActivityFirstIn applies the In predicate on the "activity_first" field.
func ActivityFirstIn(vs ...int) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActivityFirst), v...))
	})
}

// ActivityFirstNotIn applies the NotIn predicate on the "activity_first" field.
func ActivityFirstNotIn(vs ...int) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActivityFirst), v...))
	})
}

// ActivityFirstGT applies the GT predicate on the "activity_first" field.
func ActivityFirstGT(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActivityFirst), v))
	})
}

// ActivityFirstGTE applies the GTE predicate on the "activity_first" field.
func ActivityFirstGTE(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActivityFirst), v))
	})
}

// ActivityFirstLT applies the LT predicate on the "activity_first" field.
func ActivityFirstLT(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActivityFirst), v))
	})
}

// ActivityFirstLTE applies the LTE predicate on the "activity_first" field.
func ActivityFirstLTE(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActivityFirst), v))
	})
}

// ActivityFirstIsNil applies the IsNil predicate on the "activity_first" field.
func ActivityFirstIsNil() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActivityFirst)))
	})
}

// ActivityFirstNotNil applies the NotNil predicate on the "activity_first" field.
func ActivityFirstNotNil() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActivityFirst)))
	})
}

// ActivitySecondEQ applies the EQ predicate on the "activity_second" field.
func ActivitySecondEQ(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivitySecond), v))
	})
}

// ActivitySecondNEQ applies the NEQ predicate on the "activity_second" field.
func ActivitySecondNEQ(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivitySecond), v))
	})
}

// ActivitySecondIn applies the In predicate on the "activity_second" field.
func ActivitySecondIn(vs ...int) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActivitySecond), v...))
	})
}

// ActivitySecondNotIn applies the NotIn predicate on the "activity_second" field.
func ActivitySecondNotIn(vs ...int) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActivitySecond), v...))
	})
}

// ActivitySecondGT applies the GT predicate on the "activity_second" field.
func ActivitySecondGT(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActivitySecond), v))
	})
}

// ActivitySecondGTE applies the GTE predicate on the "activity_second" field.
func ActivitySecondGTE(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActivitySecond), v))
	})
}

// ActivitySecondLT applies the LT predicate on the "activity_second" field.
func ActivitySecondLT(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActivitySecond), v))
	})
}

// ActivitySecondLTE applies the LTE predicate on the "activity_second" field.
func ActivitySecondLTE(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActivitySecond), v))
	})
}

// ActivitySecondIsNil applies the IsNil predicate on the "activity_second" field.
func ActivitySecondIsNil() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActivitySecond)))
	})
}

// ActivitySecondNotNil applies the NotNil predicate on the "activity_second" field.
func ActivitySecondNotNil() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActivitySecond)))
	})
}

// WrittenFirstEQ applies the EQ predicate on the "written_first" field.
func WrittenFirstEQ(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWrittenFirst), v))
	})
}

// WrittenFirstNEQ applies the NEQ predicate on the "written_first" field.
func WrittenFirstNEQ(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWrittenFirst), v))
	})
}

// WrittenFirstIn applies the In predicate on the "written_first" field.
func WrittenFirstIn(vs ...int) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWrittenFirst), v...))
	})
}

// WrittenFirstNotIn applies the NotIn predicate on the "written_first" field.
func WrittenFirstNotIn(vs ...int) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWrittenFirst), v...))
	})
}

// WrittenFirstGT applies the GT predicate on the "written_first" field.
func WrittenFirstGT(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWrittenFirst), v))
	})
}

// WrittenFirstGTE applies the GTE predicate on the "written_first" field.
func WrittenFirstGTE(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWrittenFirst), v))
	})
}

// WrittenFirstLT applies the LT predicate on the "written_first" field.
func WrittenFirstLT(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWrittenFirst), v))
	})
}

// WrittenFirstLTE applies the LTE predicate on the "written_first" field.
func WrittenFirstLTE(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWrittenFirst), v))
	})
}

// WrittenFirstIsNil applies the IsNil predicate on the "written_first" field.
func WrittenFirstIsNil() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWrittenFirst)))
	})
}

// WrittenFirstNotNil applies the NotNil predicate on the "written_first" field.
func WrittenFirstNotNil() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWrittenFirst)))
	})
}

// WrittenSecondEQ applies the EQ predicate on the "written_second" field.
func WrittenSecondEQ(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWrittenSecond), v))
	})
}

// WrittenSecondNEQ applies the NEQ predicate on the "written_second" field.
func WrittenSecondNEQ(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWrittenSecond), v))
	})
}

// WrittenSecondIn applies the In predicate on the "written_second" field.
func WrittenSecondIn(vs ...int) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWrittenSecond), v...))
	})
}

// WrittenSecondNotIn applies the NotIn predicate on the "written_second" field.
func WrittenSecondNotIn(vs ...int) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWrittenSecond), v...))
	})
}

// WrittenSecondGT applies the GT predicate on the "written_second" field.
func WrittenSecondGT(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWrittenSecond), v))
	})
}

// WrittenSecondGTE applies the GTE predicate on the "written_second" field.
func WrittenSecondGTE(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWrittenSecond), v))
	})
}

// WrittenSecondLT applies the LT predicate on the "written_second" field.
func WrittenSecondLT(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWrittenSecond), v))
	})
}

// WrittenSecondLTE applies the LTE predicate on the "written_second" field.
func WrittenSecondLTE(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWrittenSecond), v))
	})
}

// WrittenSecondIsNil applies the IsNil predicate on the "written_second" field.
func WrittenSecondIsNil() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWrittenSecond)))
	})
}

// WrittenSecondNotNil applies the NotNil predicate on the "written_second" field.
func WrittenSecondNotNil() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWrittenSecond)))
	})
}

// CourseFinalEQ applies the EQ predicate on the "course_final" field.
func CourseFinalEQ(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseFinal), v))
	})
}

// CourseFinalNEQ applies the NEQ predicate on the "course_final" field.
func CourseFinalNEQ(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourseFinal), v))
	})
}

// CourseFinalIn applies the In predicate on the "course_final" field.
func CourseFinalIn(vs ...int) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourseFinal), v...))
	})
}

// CourseFinalNotIn applies the NotIn predicate on the "course_final" field.
func CourseFinalNotIn(vs ...int) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourseFinal), v...))
	})
}

// CourseFinalGT applies the GT predicate on the "course_final" field.
func CourseFinalGT(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourseFinal), v))
	})
}

// CourseFinalGTE applies the GTE predicate on the "course_final" field.
func CourseFinalGTE(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourseFinal), v))
	})
}

// CourseFinalLT applies the LT predicate on the "course_final" field.
func CourseFinalLT(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourseFinal), v))
	})
}

// CourseFinalLTE applies the LTE predicate on the "course_final" field.
func CourseFinalLTE(v int) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourseFinal), v))
	})
}

// CourseFinalIsNil applies the IsNil predicate on the "course_final" field.
func CourseFinalIsNil() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCourseFinal)))
	})
}

// CourseFinalNotNil applies the NotNil predicate on the "course_final" field.
func CourseFinalNotNil() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCourseFinal)))
	})
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYear), v))
	})
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...string) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYear), v...))
	})
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...string) predicate.CourseGrade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseGrade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYear), v...))
	})
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYear), v))
	})
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYear), v))
	})
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYear), v))
	})
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYear), v))
	})
}

// YearContains applies the Contains predicate on the "year" field.
func YearContains(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldYear), v))
	})
}

// YearHasPrefix applies the HasPrefix predicate on the "year" field.
func YearHasPrefix(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldYear), v))
	})
}

// YearHasSuffix applies the HasSuffix predicate on the "year" field.
func YearHasSuffix(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldYear), v))
	})
}

// YearEqualFold applies the EqualFold predicate on the "year" field.
func YearEqualFold(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldYear), v))
	})
}

// YearContainsFold applies the ContainsFold predicate on the "year" field.
func YearContainsFold(v string) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldYear), v))
	})
}

// HasStudent applies the HasEdge predicate on the "student" edge.
func HasStudent() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentWith applies the HasEdge predicate on the "student" edge with a given conditions (other predicates).
func HasStudentWith(preds ...predicate.User) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.Class) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CourseGrade) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CourseGrade) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CourseGrade) predicate.CourseGrade {
	return predicate.CourseGrade(func(s *sql.Selector) {
		p(s.Not())
	})
}
