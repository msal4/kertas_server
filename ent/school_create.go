// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/msal4/hassah_school_server/ent/school"
	"github.com/msal4/hassah_school_server/ent/stage"
	"github.com/msal4/hassah_school_server/ent/user"
)

// SchoolCreate is the builder for creating a School entity.
type SchoolCreate struct {
	config
	mutation *SchoolMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *SchoolCreate) SetCreatedAt(t time.Time) *SchoolCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SchoolCreate) SetNillableCreatedAt(t *time.Time) *SchoolCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SchoolCreate) SetUpdatedAt(t time.Time) *SchoolCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SchoolCreate) SetNillableUpdatedAt(t *time.Time) *SchoolCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SchoolCreate) SetName(s string) *SchoolCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetImage sets the "image" field.
func (sc *SchoolCreate) SetImage(s string) *SchoolCreate {
	sc.mutation.SetImage(s)
	return sc
}

// SetDirectory sets the "directory" field.
func (sc *SchoolCreate) SetDirectory(s string) *SchoolCreate {
	sc.mutation.SetDirectory(s)
	return sc
}

// SetActive sets the "active" field.
func (sc *SchoolCreate) SetActive(b bool) *SchoolCreate {
	sc.mutation.SetActive(b)
	return sc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (sc *SchoolCreate) SetNillableActive(b *bool) *SchoolCreate {
	if b != nil {
		sc.SetActive(*b)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SchoolCreate) SetDeletedAt(t time.Time) *SchoolCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SchoolCreate) SetNillableDeletedAt(t *time.Time) *SchoolCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SchoolCreate) SetID(u uuid.UUID) *SchoolCreate {
	sc.mutation.SetID(u)
	return sc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (sc *SchoolCreate) AddUserIDs(ids ...uuid.UUID) *SchoolCreate {
	sc.mutation.AddUserIDs(ids...)
	return sc
}

// AddUsers adds the "users" edges to the User entity.
func (sc *SchoolCreate) AddUsers(u ...*User) *SchoolCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sc.AddUserIDs(ids...)
}

// AddStageIDs adds the "stages" edge to the Stage entity by IDs.
func (sc *SchoolCreate) AddStageIDs(ids ...uuid.UUID) *SchoolCreate {
	sc.mutation.AddStageIDs(ids...)
	return sc
}

// AddStages adds the "stages" edges to the Stage entity.
func (sc *SchoolCreate) AddStages(s ...*Stage) *SchoolCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddStageIDs(ids...)
}

// Mutation returns the SchoolMutation object of the builder.
func (sc *SchoolCreate) Mutation() *SchoolMutation {
	return sc.mutation
}

// Save creates the School in the database.
func (sc *SchoolCreate) Save(ctx context.Context) (*School, error) {
	var (
		err  error
		node *School
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SchoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SchoolCreate) SaveX(ctx context.Context) *School {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SchoolCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SchoolCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SchoolCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := school.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := school.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Active(); !ok {
		v := school.DefaultActive
		sc.mutation.SetActive(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := school.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SchoolCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := school.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "image"`)}
	}
	if v, ok := sc.mutation.Image(); ok {
		if err := school.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "image": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Directory(); !ok {
		return &ValidationError{Name: "directory", err: errors.New(`ent: missing required field "directory"`)}
	}
	if v, ok := sc.mutation.Directory(); ok {
		if err := school.DirectoryValidator(v); err != nil {
			return &ValidationError{Name: "directory", err: fmt.Errorf(`ent: validator failed for field "directory": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "active"`)}
	}
	return nil
}

func (sc *SchoolCreate) sqlSave(ctx context.Context) (*School, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (sc *SchoolCreate) createSpec() (*School, *sqlgraph.CreateSpec) {
	var (
		_node = &School{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: school.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: school.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: school.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: school.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := sc.mutation.Directory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldDirectory,
		})
		_node.Directory = value
	}
	if value, ok := sc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: school.FieldActive,
		})
		_node.Active = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: school.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := sc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.UsersTable,
			Columns: []string{school.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.StagesTable,
			Columns: []string{school.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: stage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.School.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SchoolUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sc *SchoolCreate) OnConflict(opts ...sql.ConflictOption) *SchoolUpsertOne {
	sc.conflict = opts
	return &SchoolUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.School.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *SchoolCreate) OnConflictColumns(columns ...string) *SchoolUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SchoolUpsertOne{
		create: sc,
	}
}

type (
	// SchoolUpsertOne is the builder for "upsert"-ing
	//  one School node.
	SchoolUpsertOne struct {
		create *SchoolCreate
	}

	// SchoolUpsert is the "OnConflict" setter.
	SchoolUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SchoolUpsert) SetCreatedAt(v time.Time) *SchoolUpsert {
	u.Set(school.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SchoolUpsert) UpdateCreatedAt() *SchoolUpsert {
	u.SetExcluded(school.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SchoolUpsert) SetUpdatedAt(v time.Time) *SchoolUpsert {
	u.Set(school.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SchoolUpsert) UpdateUpdatedAt() *SchoolUpsert {
	u.SetExcluded(school.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *SchoolUpsert) SetName(v string) *SchoolUpsert {
	u.Set(school.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SchoolUpsert) UpdateName() *SchoolUpsert {
	u.SetExcluded(school.FieldName)
	return u
}

// SetImage sets the "image" field.
func (u *SchoolUpsert) SetImage(v string) *SchoolUpsert {
	u.Set(school.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *SchoolUpsert) UpdateImage() *SchoolUpsert {
	u.SetExcluded(school.FieldImage)
	return u
}

// SetDirectory sets the "directory" field.
func (u *SchoolUpsert) SetDirectory(v string) *SchoolUpsert {
	u.Set(school.FieldDirectory, v)
	return u
}

// UpdateDirectory sets the "directory" field to the value that was provided on create.
func (u *SchoolUpsert) UpdateDirectory() *SchoolUpsert {
	u.SetExcluded(school.FieldDirectory)
	return u
}

// SetActive sets the "active" field.
func (u *SchoolUpsert) SetActive(v bool) *SchoolUpsert {
	u.Set(school.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *SchoolUpsert) UpdateActive() *SchoolUpsert {
	u.SetExcluded(school.FieldActive)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SchoolUpsert) SetDeletedAt(v time.Time) *SchoolUpsert {
	u.Set(school.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SchoolUpsert) UpdateDeletedAt() *SchoolUpsert {
	u.SetExcluded(school.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SchoolUpsert) ClearDeletedAt() *SchoolUpsert {
	u.SetNull(school.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.School.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(school.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SchoolUpsertOne) UpdateNewValues() *SchoolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(school.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.School.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SchoolUpsertOne) Ignore() *SchoolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SchoolUpsertOne) DoNothing() *SchoolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SchoolCreate.OnConflict
// documentation for more info.
func (u *SchoolUpsertOne) Update(set func(*SchoolUpsert)) *SchoolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SchoolUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SchoolUpsertOne) SetCreatedAt(v time.Time) *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SchoolUpsertOne) UpdateCreatedAt() *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SchoolUpsertOne) SetUpdatedAt(v time.Time) *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SchoolUpsertOne) UpdateUpdatedAt() *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *SchoolUpsertOne) SetName(v string) *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SchoolUpsertOne) UpdateName() *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *SchoolUpsertOne) SetImage(v string) *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *SchoolUpsertOne) UpdateImage() *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateImage()
	})
}

// SetDirectory sets the "directory" field.
func (u *SchoolUpsertOne) SetDirectory(v string) *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.SetDirectory(v)
	})
}

// UpdateDirectory sets the "directory" field to the value that was provided on create.
func (u *SchoolUpsertOne) UpdateDirectory() *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateDirectory()
	})
}

// SetActive sets the "active" field.
func (u *SchoolUpsertOne) SetActive(v bool) *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *SchoolUpsertOne) UpdateActive() *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateActive()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SchoolUpsertOne) SetDeletedAt(v time.Time) *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SchoolUpsertOne) UpdateDeletedAt() *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SchoolUpsertOne) ClearDeletedAt() *SchoolUpsertOne {
	return u.Update(func(s *SchoolUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SchoolUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SchoolCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SchoolUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SchoolUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SchoolUpsertOne.ID is not supported by MySQL driver. Use SchoolUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SchoolUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SchoolCreateBulk is the builder for creating many School entities in bulk.
type SchoolCreateBulk struct {
	config
	builders []*SchoolCreate
	conflict []sql.ConflictOption
}

// Save creates the School entities in the database.
func (scb *SchoolCreateBulk) Save(ctx context.Context) ([]*School, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*School, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SchoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SchoolCreateBulk) SaveX(ctx context.Context) []*School {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SchoolCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SchoolCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.School.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SchoolUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scb *SchoolCreateBulk) OnConflict(opts ...sql.ConflictOption) *SchoolUpsertBulk {
	scb.conflict = opts
	return &SchoolUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.School.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *SchoolCreateBulk) OnConflictColumns(columns ...string) *SchoolUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SchoolUpsertBulk{
		create: scb,
	}
}

// SchoolUpsertBulk is the builder for "upsert"-ing
// a bulk of School nodes.
type SchoolUpsertBulk struct {
	create *SchoolCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.School.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(school.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SchoolUpsertBulk) UpdateNewValues() *SchoolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(school.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.School.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SchoolUpsertBulk) Ignore() *SchoolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SchoolUpsertBulk) DoNothing() *SchoolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SchoolCreateBulk.OnConflict
// documentation for more info.
func (u *SchoolUpsertBulk) Update(set func(*SchoolUpsert)) *SchoolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SchoolUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SchoolUpsertBulk) SetCreatedAt(v time.Time) *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SchoolUpsertBulk) UpdateCreatedAt() *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SchoolUpsertBulk) SetUpdatedAt(v time.Time) *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SchoolUpsertBulk) UpdateUpdatedAt() *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *SchoolUpsertBulk) SetName(v string) *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SchoolUpsertBulk) UpdateName() *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *SchoolUpsertBulk) SetImage(v string) *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *SchoolUpsertBulk) UpdateImage() *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateImage()
	})
}

// SetDirectory sets the "directory" field.
func (u *SchoolUpsertBulk) SetDirectory(v string) *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.SetDirectory(v)
	})
}

// UpdateDirectory sets the "directory" field to the value that was provided on create.
func (u *SchoolUpsertBulk) UpdateDirectory() *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateDirectory()
	})
}

// SetActive sets the "active" field.
func (u *SchoolUpsertBulk) SetActive(v bool) *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *SchoolUpsertBulk) UpdateActive() *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateActive()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SchoolUpsertBulk) SetDeletedAt(v time.Time) *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SchoolUpsertBulk) UpdateDeletedAt() *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SchoolUpsertBulk) ClearDeletedAt() *SchoolUpsertBulk {
	return u.Update(func(s *SchoolUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SchoolUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SchoolCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SchoolCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SchoolUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
