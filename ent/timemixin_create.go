// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/msal4/hassah_school_server/ent/timemixin"
)

// TimeMixinCreate is the builder for creating a TimeMixin entity.
type TimeMixinCreate struct {
	config
	mutation *TimeMixinMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tmc *TimeMixinCreate) SetCreatedAt(t time.Time) *TimeMixinCreate {
	tmc.mutation.SetCreatedAt(t)
	return tmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmc *TimeMixinCreate) SetNillableCreatedAt(t *time.Time) *TimeMixinCreate {
	if t != nil {
		tmc.SetCreatedAt(*t)
	}
	return tmc
}

// SetUpdatedAt sets the "updated_at" field.
func (tmc *TimeMixinCreate) SetUpdatedAt(t time.Time) *TimeMixinCreate {
	tmc.mutation.SetUpdatedAt(t)
	return tmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tmc *TimeMixinCreate) SetNillableUpdatedAt(t *time.Time) *TimeMixinCreate {
	if t != nil {
		tmc.SetUpdatedAt(*t)
	}
	return tmc
}

// Mutation returns the TimeMixinMutation object of the builder.
func (tmc *TimeMixinCreate) Mutation() *TimeMixinMutation {
	return tmc.mutation
}

// Save creates the TimeMixin in the database.
func (tmc *TimeMixinCreate) Save(ctx context.Context) (*TimeMixin, error) {
	var (
		err  error
		node *TimeMixin
	)
	tmc.defaults()
	if len(tmc.hooks) == 0 {
		if err = tmc.check(); err != nil {
			return nil, err
		}
		node, err = tmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimeMixinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tmc.check(); err != nil {
				return nil, err
			}
			tmc.mutation = mutation
			if node, err = tmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tmc.hooks) - 1; i >= 0; i-- {
			if tmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TimeMixinCreate) SaveX(ctx context.Context) *TimeMixin {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TimeMixinCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TimeMixinCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmc *TimeMixinCreate) defaults() {
	if _, ok := tmc.mutation.CreatedAt(); !ok {
		v := timemixin.DefaultCreatedAt()
		tmc.mutation.SetCreatedAt(v)
	}
	if _, ok := tmc.mutation.UpdatedAt(); !ok {
		v := timemixin.DefaultUpdatedAt()
		tmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TimeMixinCreate) check() error {
	if _, ok := tmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := tmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (tmc *TimeMixinCreate) sqlSave(ctx context.Context) (*TimeMixin, error) {
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tmc *TimeMixinCreate) createSpec() (*TimeMixin, *sqlgraph.CreateSpec) {
	var (
		_node = &TimeMixin{config: tmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: timemixin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timemixin.FieldID,
			},
		}
	)
	if value, ok := tmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timemixin.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timemixin.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TimeMixinCreateBulk is the builder for creating many TimeMixin entities in bulk.
type TimeMixinCreateBulk struct {
	config
	builders []*TimeMixinCreate
}

// Save creates the TimeMixin entities in the database.
func (tmcb *TimeMixinCreateBulk) Save(ctx context.Context) ([]*TimeMixin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TimeMixin, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimeMixinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TimeMixinCreateBulk) SaveX(ctx context.Context) []*TimeMixin {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TimeMixinCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TimeMixinCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
