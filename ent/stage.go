// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/msal4/hassah_school_server/ent/school"
	"github.com/msal4/hassah_school_server/ent/stage"
)

// Stage is the model entity for the Stage schema.
type Stage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// TuitionAmount holds the value of the "tuition_amount" field.
	TuitionAmount int `json:"tuition_amount,omitempty"`
	// Directory holds the value of the "directory" field.
	Directory string `json:"directory,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StageQuery when eager-loading is set.
	Edges         StageEdges `json:"edges"`
	school_stages *uuid.UUID
}

// StageEdges holds the relations/edges for other nodes in the graph.
type StageEdges struct {
	// School holds the value of the school edge.
	School *School `json:"school,omitempty"`
	// Classes holds the value of the classes edge.
	Classes []*Class `json:"classes,omitempty"`
	// Payments holds the value of the payments edge.
	Payments []*TuitionPayment `json:"payments,omitempty"`
	// Students holds the value of the students edge.
	Students []*User `json:"students,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SchoolOrErr returns the School value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StageEdges) SchoolOrErr() (*School, error) {
	if e.loadedTypes[0] {
		if e.School == nil {
			// The edge school was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: school.Label}
		}
		return e.School, nil
	}
	return nil, &NotLoadedError{edge: "school"}
}

// ClassesOrErr returns the Classes value or an error if the edge
// was not loaded in eager-loading.
func (e StageEdges) ClassesOrErr() ([]*Class, error) {
	if e.loadedTypes[1] {
		return e.Classes, nil
	}
	return nil, &NotLoadedError{edge: "classes"}
}

// PaymentsOrErr returns the Payments value or an error if the edge
// was not loaded in eager-loading.
func (e StageEdges) PaymentsOrErr() ([]*TuitionPayment, error) {
	if e.loadedTypes[2] {
		return e.Payments, nil
	}
	return nil, &NotLoadedError{edge: "payments"}
}

// StudentsOrErr returns the Students value or an error if the edge
// was not loaded in eager-loading.
func (e StageEdges) StudentsOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.Students, nil
	}
	return nil, &NotLoadedError{edge: "students"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stage.FieldActive:
			values[i] = new(sql.NullBool)
		case stage.FieldTuitionAmount:
			values[i] = new(sql.NullInt64)
		case stage.FieldName, stage.FieldDirectory:
			values[i] = new(sql.NullString)
		case stage.FieldCreatedAt, stage.FieldUpdatedAt, stage.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case stage.FieldID:
			values[i] = new(uuid.UUID)
		case stage.ForeignKeys[0]: // school_stages
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Stage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stage fields.
func (s *Stage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case stage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case stage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case stage.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case stage.FieldTuitionAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tuition_amount", values[i])
			} else if value.Valid {
				s.TuitionAmount = int(value.Int64)
			}
		case stage.FieldDirectory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field directory", values[i])
			} else if value.Valid {
				s.Directory = value.String
			}
		case stage.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				s.Active = value.Bool
			}
		case stage.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case stage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field school_stages", values[i])
			} else if value.Valid {
				s.school_stages = new(uuid.UUID)
				*s.school_stages = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QuerySchool queries the "school" edge of the Stage entity.
func (s *Stage) QuerySchool() *SchoolQuery {
	return (&StageClient{config: s.config}).QuerySchool(s)
}

// QueryClasses queries the "classes" edge of the Stage entity.
func (s *Stage) QueryClasses() *ClassQuery {
	return (&StageClient{config: s.config}).QueryClasses(s)
}

// QueryPayments queries the "payments" edge of the Stage entity.
func (s *Stage) QueryPayments() *TuitionPaymentQuery {
	return (&StageClient{config: s.config}).QueryPayments(s)
}

// QueryStudents queries the "students" edge of the Stage entity.
func (s *Stage) QueryStudents() *UserQuery {
	return (&StageClient{config: s.config}).QueryStudents(s)
}

// Update returns a builder for updating this Stage.
// Note that you need to call Stage.Unwrap() before calling this method if this Stage
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stage) Update() *StageUpdateOne {
	return (&StageClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Stage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stage) Unwrap() *Stage {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stage is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stage) String() string {
	var builder strings.Builder
	builder.WriteString("Stage(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", tuition_amount=")
	builder.WriteString(fmt.Sprintf("%v", s.TuitionAmount))
	builder.WriteString(", directory=")
	builder.WriteString(s.Directory)
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", s.Active))
	if v := s.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Stages is a parsable slice of Stage.
type Stages []*Stage

func (s Stages) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
