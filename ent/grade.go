// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/msal4/hassah_school_server/ent/assignment"
	"github.com/msal4/hassah_school_server/ent/grade"
	"github.com/msal4/hassah_school_server/ent/user"
)

// Grade is the model entity for the Grade schema.
type Grade struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ExamGrade holds the value of the "exam_grade" field.
	ExamGrade float64 `json:"exam_grade,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GradeQuery when eager-loading is set.
	Edges             GradeEdges `json:"edges"`
	assignment_grades *int
	user_grades       *int
}

// GradeEdges holds the relations/edges for other nodes in the graph.
type GradeEdges struct {
	// Student holds the value of the student edge.
	Student *User `json:"student,omitempty"`
	// Exam holds the value of the exam edge.
	Exam *Assignment `json:"exam,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GradeEdges) StudentOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Student == nil {
			// The edge student was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// ExamOrErr returns the Exam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GradeEdges) ExamOrErr() (*Assignment, error) {
	if e.loadedTypes[1] {
		if e.Exam == nil {
			// The edge exam was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: assignment.Label}
		}
		return e.Exam, nil
	}
	return nil, &NotLoadedError{edge: "exam"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Grade) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case grade.FieldExamGrade:
			values[i] = new(sql.NullFloat64)
		case grade.FieldID:
			values[i] = new(sql.NullInt64)
		case grade.FieldCreatedAt, grade.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case grade.ForeignKeys[0]: // assignment_grades
			values[i] = new(sql.NullInt64)
		case grade.ForeignKeys[1]: // user_grades
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Grade", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Grade fields.
func (gr *Grade) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grade.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case grade.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case grade.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gr.UpdatedAt = value.Time
			}
		case grade.FieldExamGrade:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_grade", values[i])
			} else if value.Valid {
				gr.ExamGrade = value.Float64
			}
		case grade.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field assignment_grades", value)
			} else if value.Valid {
				gr.assignment_grades = new(int)
				*gr.assignment_grades = int(value.Int64)
			}
		case grade.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_grades", value)
			} else if value.Valid {
				gr.user_grades = new(int)
				*gr.user_grades = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStudent queries the "student" edge of the Grade entity.
func (gr *Grade) QueryStudent() *UserQuery {
	return (&GradeClient{config: gr.config}).QueryStudent(gr)
}

// QueryExam queries the "exam" edge of the Grade entity.
func (gr *Grade) QueryExam() *AssignmentQuery {
	return (&GradeClient{config: gr.config}).QueryExam(gr)
}

// Update returns a builder for updating this Grade.
// Note that you need to call Grade.Unwrap() before calling this method if this Grade
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Grade) Update() *GradeUpdateOne {
	return (&GradeClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the Grade entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Grade) Unwrap() *Grade {
	tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Grade is not a transactional entity")
	}
	gr.config.driver = tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Grade) String() string {
	var builder strings.Builder
	builder.WriteString("Grade(")
	builder.WriteString(fmt.Sprintf("id=%v", gr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", exam_grade=")
	builder.WriteString(fmt.Sprintf("%v", gr.ExamGrade))
	builder.WriteByte(')')
	return builder.String()
}

// Grades is a parsable slice of Grade.
type Grades []*Grade

func (gr Grades) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
