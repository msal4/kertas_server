// Code generated by entc, DO NOT EDIT.

package schedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/msal4/hassah_school_server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Weekday applies equality check predicate on the "weekday" field. It's identical to WeekdayEQ.
func Weekday(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeekday), v))
	})
}

// StartsAt applies equality check predicate on the "starts_at" field. It's identical to StartsAtEQ.
func StartsAt(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartsAt), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// WeekdayEQ applies the EQ predicate on the "weekday" field.
func WeekdayEQ(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeekday), v))
	})
}

// WeekdayNEQ applies the NEQ predicate on the "weekday" field.
func WeekdayNEQ(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeekday), v))
	})
}

// WeekdayIn applies the In predicate on the "weekday" field.
func WeekdayIn(vs ...int) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWeekday), v...))
	})
}

// WeekdayNotIn applies the NotIn predicate on the "weekday" field.
func WeekdayNotIn(vs ...int) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWeekday), v...))
	})
}

// WeekdayGT applies the GT predicate on the "weekday" field.
func WeekdayGT(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeekday), v))
	})
}

// WeekdayGTE applies the GTE predicate on the "weekday" field.
func WeekdayGTE(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeekday), v))
	})
}

// WeekdayLT applies the LT predicate on the "weekday" field.
func WeekdayLT(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeekday), v))
	})
}

// WeekdayLTE applies the LTE predicate on the "weekday" field.
func WeekdayLTE(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeekday), v))
	})
}

// StartsAtEQ applies the EQ predicate on the "starts_at" field.
func StartsAtEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartsAt), v))
	})
}

// StartsAtNEQ applies the NEQ predicate on the "starts_at" field.
func StartsAtNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartsAt), v))
	})
}

// StartsAtIn applies the In predicate on the "starts_at" field.
func StartsAtIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartsAt), v...))
	})
}

// StartsAtNotIn applies the NotIn predicate on the "starts_at" field.
func StartsAtNotIn(vs ...time.Time) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartsAt), v...))
	})
}

// StartsAtGT applies the GT predicate on the "starts_at" field.
func StartsAtGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartsAt), v))
	})
}

// StartsAtGTE applies the GTE predicate on the "starts_at" field.
func StartsAtGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartsAt), v))
	})
}

// StartsAtLT applies the LT predicate on the "starts_at" field.
func StartsAtLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartsAt), v))
	})
}

// StartsAtLTE applies the LTE predicate on the "starts_at" field.
func StartsAtLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartsAt), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.Class) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		p(s.Not())
	})
}
