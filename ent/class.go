// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/msal4/hassah_school_server/ent/class"
	"github.com/msal4/hassah_school_server/ent/group"
	"github.com/msal4/hassah_school_server/ent/schema"
	"github.com/msal4/hassah_school_server/ent/stage"
	"github.com/msal4/hassah_school_server/ent/user"
)

// Class is the model entity for the Class schema.
type Class struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	Status schema.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClassQuery when eager-loading is set.
	Edges         ClassEdges `json:"edges"`
	stage_classes *int
	user_classes  *int
}

// ClassEdges holds the relations/edges for other nodes in the graph.
type ClassEdges struct {
	// Stage holds the value of the stage edge.
	Stage *Stage `json:"stage,omitempty"`
	// Teacher holds the value of the teacher edge.
	Teacher *User `json:"teacher,omitempty"`
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// Assignments holds the value of the assignments edge.
	Assignments []*Assignment `json:"assignments,omitempty"`
	// Attendances holds the value of the attendances edge.
	Attendances []*Attendance `json:"attendances,omitempty"`
	// Schedules holds the value of the schedules edge.
	Schedules []*Schedule `json:"schedules,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// StageOrErr returns the Stage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEdges) StageOrErr() (*Stage, error) {
	if e.loadedTypes[0] {
		if e.Stage == nil {
			// The edge stage was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: stage.Label}
		}
		return e.Stage, nil
	}
	return nil, &NotLoadedError{edge: "stage"}
}

// TeacherOrErr returns the Teacher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEdges) TeacherOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Teacher == nil {
			// The edge teacher was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Teacher, nil
	}
	return nil, &NotLoadedError{edge: "teacher"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[2] {
		if e.Group == nil {
			// The edge group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// AssignmentsOrErr returns the Assignments value or an error if the edge
// was not loaded in eager-loading.
func (e ClassEdges) AssignmentsOrErr() ([]*Assignment, error) {
	if e.loadedTypes[3] {
		return e.Assignments, nil
	}
	return nil, &NotLoadedError{edge: "assignments"}
}

// AttendancesOrErr returns the Attendances value or an error if the edge
// was not loaded in eager-loading.
func (e ClassEdges) AttendancesOrErr() ([]*Attendance, error) {
	if e.loadedTypes[4] {
		return e.Attendances, nil
	}
	return nil, &NotLoadedError{edge: "attendances"}
}

// SchedulesOrErr returns the Schedules value or an error if the edge
// was not loaded in eager-loading.
func (e ClassEdges) SchedulesOrErr() ([]*Schedule, error) {
	if e.loadedTypes[5] {
		return e.Schedules, nil
	}
	return nil, &NotLoadedError{edge: "schedules"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Class) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case class.FieldID:
			values[i] = new(sql.NullInt64)
		case class.FieldName, class.FieldStatus:
			values[i] = new(sql.NullString)
		case class.FieldCreateTime, class.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case class.ForeignKeys[0]: // stage_classes
			values[i] = new(sql.NullInt64)
		case class.ForeignKeys[1]: // user_classes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Class", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Class fields.
func (c *Class) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case class.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case class.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case class.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case class.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case class.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = schema.Status(value.String)
			}
		case class.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field stage_classes", value)
			} else if value.Valid {
				c.stage_classes = new(int)
				*c.stage_classes = int(value.Int64)
			}
		case class.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_classes", value)
			} else if value.Valid {
				c.user_classes = new(int)
				*c.user_classes = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStage queries the "stage" edge of the Class entity.
func (c *Class) QueryStage() *StageQuery {
	return (&ClassClient{config: c.config}).QueryStage(c)
}

// QueryTeacher queries the "teacher" edge of the Class entity.
func (c *Class) QueryTeacher() *UserQuery {
	return (&ClassClient{config: c.config}).QueryTeacher(c)
}

// QueryGroup queries the "group" edge of the Class entity.
func (c *Class) QueryGroup() *GroupQuery {
	return (&ClassClient{config: c.config}).QueryGroup(c)
}

// QueryAssignments queries the "assignments" edge of the Class entity.
func (c *Class) QueryAssignments() *AssignmentQuery {
	return (&ClassClient{config: c.config}).QueryAssignments(c)
}

// QueryAttendances queries the "attendances" edge of the Class entity.
func (c *Class) QueryAttendances() *AttendanceQuery {
	return (&ClassClient{config: c.config}).QueryAttendances(c)
}

// QuerySchedules queries the "schedules" edge of the Class entity.
func (c *Class) QuerySchedules() *ScheduleQuery {
	return (&ClassClient{config: c.config}).QuerySchedules(c)
}

// Update returns a builder for updating this Class.
// Note that you need to call Class.Unwrap() before calling this method if this Class
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Class) Update() *ClassUpdateOne {
	return (&ClassClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Class entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Class) Unwrap() *Class {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Class is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Class) String() string {
	var builder strings.Builder
	builder.WriteString("Class(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Classes is a parsable slice of Class.
type Classes []*Class

func (c Classes) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
