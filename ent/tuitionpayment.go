// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/msal4/hassah_school_server/ent/stage"
	"github.com/msal4/hassah_school_server/ent/tuitionpayment"
	"github.com/msal4/hassah_school_server/ent/user"
)

// TuitionPayment is the model entity for the TuitionPayment schema.
type TuitionPayment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// PaidAmount holds the value of the "paid_amount" field.
	PaidAmount int `json:"paid_amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TuitionPaymentQuery when eager-loading is set.
	Edges          TuitionPaymentEdges `json:"edges"`
	stage_payments *int
	user_payments  *int
}

// TuitionPaymentEdges holds the relations/edges for other nodes in the graph.
type TuitionPaymentEdges struct {
	// Student holds the value of the student edge.
	Student *User `json:"student,omitempty"`
	// Stage holds the value of the stage edge.
	Stage *Stage `json:"stage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TuitionPaymentEdges) StudentOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Student == nil {
			// The edge student was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// StageOrErr returns the Stage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TuitionPaymentEdges) StageOrErr() (*Stage, error) {
	if e.loadedTypes[1] {
		if e.Stage == nil {
			// The edge stage was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: stage.Label}
		}
		return e.Stage, nil
	}
	return nil, &NotLoadedError{edge: "stage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TuitionPayment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tuitionpayment.FieldID, tuitionpayment.FieldPaidAmount:
			values[i] = new(sql.NullInt64)
		case tuitionpayment.FieldCreateTime, tuitionpayment.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case tuitionpayment.ForeignKeys[0]: // stage_payments
			values[i] = new(sql.NullInt64)
		case tuitionpayment.ForeignKeys[1]: // user_payments
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TuitionPayment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TuitionPayment fields.
func (tp *TuitionPayment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tuitionpayment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tp.ID = int(value.Int64)
		case tuitionpayment.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				tp.CreateTime = value.Time
			}
		case tuitionpayment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				tp.UpdateTime = value.Time
			}
		case tuitionpayment.FieldPaidAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field paid_amount", values[i])
			} else if value.Valid {
				tp.PaidAmount = int(value.Int64)
			}
		case tuitionpayment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field stage_payments", value)
			} else if value.Valid {
				tp.stage_payments = new(int)
				*tp.stage_payments = int(value.Int64)
			}
		case tuitionpayment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_payments", value)
			} else if value.Valid {
				tp.user_payments = new(int)
				*tp.user_payments = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStudent queries the "student" edge of the TuitionPayment entity.
func (tp *TuitionPayment) QueryStudent() *UserQuery {
	return (&TuitionPaymentClient{config: tp.config}).QueryStudent(tp)
}

// QueryStage queries the "stage" edge of the TuitionPayment entity.
func (tp *TuitionPayment) QueryStage() *StageQuery {
	return (&TuitionPaymentClient{config: tp.config}).QueryStage(tp)
}

// Update returns a builder for updating this TuitionPayment.
// Note that you need to call TuitionPayment.Unwrap() before calling this method if this TuitionPayment
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *TuitionPayment) Update() *TuitionPaymentUpdateOne {
	return (&TuitionPaymentClient{config: tp.config}).UpdateOne(tp)
}

// Unwrap unwraps the TuitionPayment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *TuitionPayment) Unwrap() *TuitionPayment {
	tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TuitionPayment is not a transactional entity")
	}
	tp.config.driver = tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *TuitionPayment) String() string {
	var builder strings.Builder
	builder.WriteString("TuitionPayment(")
	builder.WriteString(fmt.Sprintf("id=%v", tp.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(tp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(tp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", paid_amount=")
	builder.WriteString(fmt.Sprintf("%v", tp.PaidAmount))
	builder.WriteByte(')')
	return builder.String()
}

// TuitionPayments is a parsable slice of TuitionPayment.
type TuitionPayments []*TuitionPayment

func (tp TuitionPayments) config(cfg config) {
	for _i := range tp {
		tp[_i].config = cfg
	}
}
