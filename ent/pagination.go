// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/msal4/hassah_school_server/ent/assignment"
	"github.com/msal4/hassah_school_server/ent/assignmentsubmission"
	"github.com/msal4/hassah_school_server/ent/attendance"
	"github.com/msal4/hassah_school_server/ent/class"
	"github.com/msal4/hassah_school_server/ent/grade"
	"github.com/msal4/hassah_school_server/ent/group"
	"github.com/msal4/hassah_school_server/ent/message"
	"github.com/msal4/hassah_school_server/ent/schedule"
	"github.com/msal4/hassah_school_server/ent/school"
	"github.com/msal4/hassah_school_server/ent/stage"
	"github.com/msal4/hassah_school_server/ent/tuitionpayment"
	"github.com/msal4/hassah_school_server/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// AssignmentEdge is the edge representation of Assignment.
type AssignmentEdge struct {
	Node   *Assignment `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// AssignmentConnection is the connection containing edges to Assignment.
type AssignmentConnection struct {
	Edges      []*AssignmentEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// AssignmentPaginateOption enables pagination customization.
type AssignmentPaginateOption func(*assignmentPager) error

// WithAssignmentOrder configures pagination ordering.
func WithAssignmentOrder(order *AssignmentOrder) AssignmentPaginateOption {
	if order == nil {
		order = DefaultAssignmentOrder
	}
	o := *order
	return func(pager *assignmentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAssignmentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAssignmentFilter configures pagination filter.
func WithAssignmentFilter(filter func(*AssignmentQuery) (*AssignmentQuery, error)) AssignmentPaginateOption {
	return func(pager *assignmentPager) error {
		if filter == nil {
			return errors.New("AssignmentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type assignmentPager struct {
	order  *AssignmentOrder
	filter func(*AssignmentQuery) (*AssignmentQuery, error)
}

func newAssignmentPager(opts []AssignmentPaginateOption) (*assignmentPager, error) {
	pager := &assignmentPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAssignmentOrder
	}
	return pager, nil
}

func (p *assignmentPager) applyFilter(query *AssignmentQuery) (*AssignmentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *assignmentPager) toCursor(a *Assignment) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *assignmentPager) applyCursors(query *AssignmentQuery, after, before *Cursor) *AssignmentQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAssignmentOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *assignmentPager) applyOrder(query *AssignmentQuery, reverse bool) *AssignmentQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAssignmentOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAssignmentOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Assignment.
func (a *AssignmentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AssignmentPaginateOption,
) (*AssignmentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAssignmentPager(opts)
	if err != nil {
		return nil, err
	}

	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}

	conn := &AssignmentConnection{Edges: []*AssignmentEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := a.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := a.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	a = pager.applyCursors(a, after, before)
	a = pager.applyOrder(a, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		a = a.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := a.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Assignment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Assignment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Assignment {
			return nodes[i]
		}
	}

	conn.Edges = make([]*AssignmentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &AssignmentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// AssignmentOrderFieldCreatedAt orders Assignment by created_at.
	AssignmentOrderFieldCreatedAt = &AssignmentOrderField{
		field: assignment.FieldCreatedAt,
		toCursor: func(a *Assignment) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.CreatedAt,
			}
		},
	}
	// AssignmentOrderFieldUpdatedAt orders Assignment by updated_at.
	AssignmentOrderFieldUpdatedAt = &AssignmentOrderField{
		field: assignment.FieldUpdatedAt,
		toCursor: func(a *Assignment) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AssignmentOrderField) String() string {
	var str string
	switch f.field {
	case assignment.FieldCreatedAt:
		str = "CREATED_AT"
	case assignment.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AssignmentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AssignmentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AssignmentOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AssignmentOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *AssignmentOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid AssignmentOrderField", str)
	}
	return nil
}

// AssignmentOrderField defines the ordering field of Assignment.
type AssignmentOrderField struct {
	field    string
	toCursor func(*Assignment) Cursor
}

// AssignmentOrder defines the ordering of Assignment.
type AssignmentOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *AssignmentOrderField `json:"field"`
}

// DefaultAssignmentOrder is the default ordering of Assignment.
var DefaultAssignmentOrder = &AssignmentOrder{
	Direction: OrderDirectionAsc,
	Field: &AssignmentOrderField{
		field: assignment.FieldID,
		toCursor: func(a *Assignment) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Assignment into AssignmentEdge.
func (a *Assignment) ToEdge(order *AssignmentOrder) *AssignmentEdge {
	if order == nil {
		order = DefaultAssignmentOrder
	}
	return &AssignmentEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// AssignmentSubmissionEdge is the edge representation of AssignmentSubmission.
type AssignmentSubmissionEdge struct {
	Node   *AssignmentSubmission `json:"node"`
	Cursor Cursor                `json:"cursor"`
}

// AssignmentSubmissionConnection is the connection containing edges to AssignmentSubmission.
type AssignmentSubmissionConnection struct {
	Edges      []*AssignmentSubmissionEdge `json:"edges"`
	PageInfo   PageInfo                    `json:"pageInfo"`
	TotalCount int                         `json:"totalCount"`
}

// AssignmentSubmissionPaginateOption enables pagination customization.
type AssignmentSubmissionPaginateOption func(*assignmentSubmissionPager) error

// WithAssignmentSubmissionOrder configures pagination ordering.
func WithAssignmentSubmissionOrder(order *AssignmentSubmissionOrder) AssignmentSubmissionPaginateOption {
	if order == nil {
		order = DefaultAssignmentSubmissionOrder
	}
	o := *order
	return func(pager *assignmentSubmissionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAssignmentSubmissionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAssignmentSubmissionFilter configures pagination filter.
func WithAssignmentSubmissionFilter(filter func(*AssignmentSubmissionQuery) (*AssignmentSubmissionQuery, error)) AssignmentSubmissionPaginateOption {
	return func(pager *assignmentSubmissionPager) error {
		if filter == nil {
			return errors.New("AssignmentSubmissionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type assignmentSubmissionPager struct {
	order  *AssignmentSubmissionOrder
	filter func(*AssignmentSubmissionQuery) (*AssignmentSubmissionQuery, error)
}

func newAssignmentSubmissionPager(opts []AssignmentSubmissionPaginateOption) (*assignmentSubmissionPager, error) {
	pager := &assignmentSubmissionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAssignmentSubmissionOrder
	}
	return pager, nil
}

func (p *assignmentSubmissionPager) applyFilter(query *AssignmentSubmissionQuery) (*AssignmentSubmissionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *assignmentSubmissionPager) toCursor(as *AssignmentSubmission) Cursor {
	return p.order.Field.toCursor(as)
}

func (p *assignmentSubmissionPager) applyCursors(query *AssignmentSubmissionQuery, after, before *Cursor) *AssignmentSubmissionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAssignmentSubmissionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *assignmentSubmissionPager) applyOrder(query *AssignmentSubmissionQuery, reverse bool) *AssignmentSubmissionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAssignmentSubmissionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAssignmentSubmissionOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to AssignmentSubmission.
func (as *AssignmentSubmissionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AssignmentSubmissionPaginateOption,
) (*AssignmentSubmissionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAssignmentSubmissionPager(opts)
	if err != nil {
		return nil, err
	}

	if as, err = pager.applyFilter(as); err != nil {
		return nil, err
	}

	conn := &AssignmentSubmissionConnection{Edges: []*AssignmentSubmissionEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := as.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := as.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	as = pager.applyCursors(as, after, before)
	as = pager.applyOrder(as, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		as = as.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		as = as.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := as.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *AssignmentSubmission
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AssignmentSubmission {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AssignmentSubmission {
			return nodes[i]
		}
	}

	conn.Edges = make([]*AssignmentSubmissionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &AssignmentSubmissionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// AssignmentSubmissionOrderFieldCreatedAt orders AssignmentSubmission by created_at.
	AssignmentSubmissionOrderFieldCreatedAt = &AssignmentSubmissionOrderField{
		field: assignmentsubmission.FieldCreatedAt,
		toCursor: func(as *AssignmentSubmission) Cursor {
			return Cursor{
				ID:    as.ID,
				Value: as.CreatedAt,
			}
		},
	}
	// AssignmentSubmissionOrderFieldUpdatedAt orders AssignmentSubmission by updated_at.
	AssignmentSubmissionOrderFieldUpdatedAt = &AssignmentSubmissionOrderField{
		field: assignmentsubmission.FieldUpdatedAt,
		toCursor: func(as *AssignmentSubmission) Cursor {
			return Cursor{
				ID:    as.ID,
				Value: as.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AssignmentSubmissionOrderField) String() string {
	var str string
	switch f.field {
	case assignmentsubmission.FieldCreatedAt:
		str = "CREATED_AT"
	case assignmentsubmission.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AssignmentSubmissionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AssignmentSubmissionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AssignmentSubmissionOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AssignmentSubmissionOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *AssignmentSubmissionOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid AssignmentSubmissionOrderField", str)
	}
	return nil
}

// AssignmentSubmissionOrderField defines the ordering field of AssignmentSubmission.
type AssignmentSubmissionOrderField struct {
	field    string
	toCursor func(*AssignmentSubmission) Cursor
}

// AssignmentSubmissionOrder defines the ordering of AssignmentSubmission.
type AssignmentSubmissionOrder struct {
	Direction OrderDirection                  `json:"direction"`
	Field     *AssignmentSubmissionOrderField `json:"field"`
}

// DefaultAssignmentSubmissionOrder is the default ordering of AssignmentSubmission.
var DefaultAssignmentSubmissionOrder = &AssignmentSubmissionOrder{
	Direction: OrderDirectionAsc,
	Field: &AssignmentSubmissionOrderField{
		field: assignmentsubmission.FieldID,
		toCursor: func(as *AssignmentSubmission) Cursor {
			return Cursor{ID: as.ID}
		},
	},
}

// ToEdge converts AssignmentSubmission into AssignmentSubmissionEdge.
func (as *AssignmentSubmission) ToEdge(order *AssignmentSubmissionOrder) *AssignmentSubmissionEdge {
	if order == nil {
		order = DefaultAssignmentSubmissionOrder
	}
	return &AssignmentSubmissionEdge{
		Node:   as,
		Cursor: order.Field.toCursor(as),
	}
}

// AttendanceEdge is the edge representation of Attendance.
type AttendanceEdge struct {
	Node   *Attendance `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// AttendanceConnection is the connection containing edges to Attendance.
type AttendanceConnection struct {
	Edges      []*AttendanceEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// AttendancePaginateOption enables pagination customization.
type AttendancePaginateOption func(*attendancePager) error

// WithAttendanceOrder configures pagination ordering.
func WithAttendanceOrder(order *AttendanceOrder) AttendancePaginateOption {
	if order == nil {
		order = DefaultAttendanceOrder
	}
	o := *order
	return func(pager *attendancePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAttendanceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAttendanceFilter configures pagination filter.
func WithAttendanceFilter(filter func(*AttendanceQuery) (*AttendanceQuery, error)) AttendancePaginateOption {
	return func(pager *attendancePager) error {
		if filter == nil {
			return errors.New("AttendanceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type attendancePager struct {
	order  *AttendanceOrder
	filter func(*AttendanceQuery) (*AttendanceQuery, error)
}

func newAttendancePager(opts []AttendancePaginateOption) (*attendancePager, error) {
	pager := &attendancePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAttendanceOrder
	}
	return pager, nil
}

func (p *attendancePager) applyFilter(query *AttendanceQuery) (*AttendanceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *attendancePager) toCursor(a *Attendance) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *attendancePager) applyCursors(query *AttendanceQuery, after, before *Cursor) *AttendanceQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAttendanceOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *attendancePager) applyOrder(query *AttendanceQuery, reverse bool) *AttendanceQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAttendanceOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAttendanceOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Attendance.
func (a *AttendanceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AttendancePaginateOption,
) (*AttendanceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAttendancePager(opts)
	if err != nil {
		return nil, err
	}

	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}

	conn := &AttendanceConnection{Edges: []*AttendanceEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := a.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := a.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	a = pager.applyCursors(a, after, before)
	a = pager.applyOrder(a, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		a = a.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := a.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Attendance
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Attendance {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Attendance {
			return nodes[i]
		}
	}

	conn.Edges = make([]*AttendanceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &AttendanceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// AttendanceOrderFieldCreatedAt orders Attendance by created_at.
	AttendanceOrderFieldCreatedAt = &AttendanceOrderField{
		field: attendance.FieldCreatedAt,
		toCursor: func(a *Attendance) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.CreatedAt,
			}
		},
	}
	// AttendanceOrderFieldUpdatedAt orders Attendance by updated_at.
	AttendanceOrderFieldUpdatedAt = &AttendanceOrderField{
		field: attendance.FieldUpdatedAt,
		toCursor: func(a *Attendance) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AttendanceOrderField) String() string {
	var str string
	switch f.field {
	case attendance.FieldCreatedAt:
		str = "CREATED_AT"
	case attendance.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AttendanceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AttendanceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AttendanceOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AttendanceOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *AttendanceOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid AttendanceOrderField", str)
	}
	return nil
}

// AttendanceOrderField defines the ordering field of Attendance.
type AttendanceOrderField struct {
	field    string
	toCursor func(*Attendance) Cursor
}

// AttendanceOrder defines the ordering of Attendance.
type AttendanceOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *AttendanceOrderField `json:"field"`
}

// DefaultAttendanceOrder is the default ordering of Attendance.
var DefaultAttendanceOrder = &AttendanceOrder{
	Direction: OrderDirectionAsc,
	Field: &AttendanceOrderField{
		field: attendance.FieldID,
		toCursor: func(a *Attendance) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Attendance into AttendanceEdge.
func (a *Attendance) ToEdge(order *AttendanceOrder) *AttendanceEdge {
	if order == nil {
		order = DefaultAttendanceOrder
	}
	return &AttendanceEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// ClassEdge is the edge representation of Class.
type ClassEdge struct {
	Node   *Class `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ClassConnection is the connection containing edges to Class.
type ClassConnection struct {
	Edges      []*ClassEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// ClassPaginateOption enables pagination customization.
type ClassPaginateOption func(*classPager) error

// WithClassOrder configures pagination ordering.
func WithClassOrder(order *ClassOrder) ClassPaginateOption {
	if order == nil {
		order = DefaultClassOrder
	}
	o := *order
	return func(pager *classPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultClassOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithClassFilter configures pagination filter.
func WithClassFilter(filter func(*ClassQuery) (*ClassQuery, error)) ClassPaginateOption {
	return func(pager *classPager) error {
		if filter == nil {
			return errors.New("ClassQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type classPager struct {
	order  *ClassOrder
	filter func(*ClassQuery) (*ClassQuery, error)
}

func newClassPager(opts []ClassPaginateOption) (*classPager, error) {
	pager := &classPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultClassOrder
	}
	return pager, nil
}

func (p *classPager) applyFilter(query *ClassQuery) (*ClassQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *classPager) toCursor(c *Class) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *classPager) applyCursors(query *ClassQuery, after, before *Cursor) *ClassQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultClassOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *classPager) applyOrder(query *ClassQuery, reverse bool) *ClassQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultClassOrder.Field {
		query = query.Order(direction.orderFunc(DefaultClassOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Class.
func (c *ClassQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ClassPaginateOption,
) (*ClassConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newClassPager(opts)
	if err != nil {
		return nil, err
	}

	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}

	conn := &ClassConnection{Edges: []*ClassEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := c.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := c.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		c = c.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := c.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Class
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Class {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Class {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ClassEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ClassEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// ClassOrderFieldCreatedAt orders Class by created_at.
	ClassOrderFieldCreatedAt = &ClassOrderField{
		field: class.FieldCreatedAt,
		toCursor: func(c *Class) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
	// ClassOrderFieldUpdatedAt orders Class by updated_at.
	ClassOrderFieldUpdatedAt = &ClassOrderField{
		field: class.FieldUpdatedAt,
		toCursor: func(c *Class) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ClassOrderField) String() string {
	var str string
	switch f.field {
	case class.FieldCreatedAt:
		str = "CREATED_AT"
	case class.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ClassOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ClassOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ClassOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ClassOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ClassOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid ClassOrderField", str)
	}
	return nil
}

// ClassOrderField defines the ordering field of Class.
type ClassOrderField struct {
	field    string
	toCursor func(*Class) Cursor
}

// ClassOrder defines the ordering of Class.
type ClassOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ClassOrderField `json:"field"`
}

// DefaultClassOrder is the default ordering of Class.
var DefaultClassOrder = &ClassOrder{
	Direction: OrderDirectionAsc,
	Field: &ClassOrderField{
		field: class.FieldID,
		toCursor: func(c *Class) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Class into ClassEdge.
func (c *Class) ToEdge(order *ClassOrder) *ClassEdge {
	if order == nil {
		order = DefaultClassOrder
	}
	return &ClassEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// GradeEdge is the edge representation of Grade.
type GradeEdge struct {
	Node   *Grade `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// GradeConnection is the connection containing edges to Grade.
type GradeConnection struct {
	Edges      []*GradeEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// GradePaginateOption enables pagination customization.
type GradePaginateOption func(*gradePager) error

// WithGradeOrder configures pagination ordering.
func WithGradeOrder(order *GradeOrder) GradePaginateOption {
	if order == nil {
		order = DefaultGradeOrder
	}
	o := *order
	return func(pager *gradePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGradeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGradeFilter configures pagination filter.
func WithGradeFilter(filter func(*GradeQuery) (*GradeQuery, error)) GradePaginateOption {
	return func(pager *gradePager) error {
		if filter == nil {
			return errors.New("GradeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type gradePager struct {
	order  *GradeOrder
	filter func(*GradeQuery) (*GradeQuery, error)
}

func newGradePager(opts []GradePaginateOption) (*gradePager, error) {
	pager := &gradePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGradeOrder
	}
	return pager, nil
}

func (p *gradePager) applyFilter(query *GradeQuery) (*GradeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *gradePager) toCursor(gr *Grade) Cursor {
	return p.order.Field.toCursor(gr)
}

func (p *gradePager) applyCursors(query *GradeQuery, after, before *Cursor) *GradeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGradeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *gradePager) applyOrder(query *GradeQuery, reverse bool) *GradeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGradeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGradeOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Grade.
func (gr *GradeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GradePaginateOption,
) (*GradeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGradePager(opts)
	if err != nil {
		return nil, err
	}

	if gr, err = pager.applyFilter(gr); err != nil {
		return nil, err
	}

	conn := &GradeConnection{Edges: []*GradeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := gr.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := gr.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	gr = pager.applyCursors(gr, after, before)
	gr = pager.applyOrder(gr, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		gr = gr.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		gr = gr.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := gr.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Grade
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Grade {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Grade {
			return nodes[i]
		}
	}

	conn.Edges = make([]*GradeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &GradeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// GradeOrderFieldCreatedAt orders Grade by created_at.
	GradeOrderFieldCreatedAt = &GradeOrderField{
		field: grade.FieldCreatedAt,
		toCursor: func(gr *Grade) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.CreatedAt,
			}
		},
	}
	// GradeOrderFieldUpdatedAt orders Grade by updated_at.
	GradeOrderFieldUpdatedAt = &GradeOrderField{
		field: grade.FieldUpdatedAt,
		toCursor: func(gr *Grade) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GradeOrderField) String() string {
	var str string
	switch f.field {
	case grade.FieldCreatedAt:
		str = "CREATED_AT"
	case grade.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GradeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GradeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GradeOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *GradeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *GradeOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid GradeOrderField", str)
	}
	return nil
}

// GradeOrderField defines the ordering field of Grade.
type GradeOrderField struct {
	field    string
	toCursor func(*Grade) Cursor
}

// GradeOrder defines the ordering of Grade.
type GradeOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *GradeOrderField `json:"field"`
}

// DefaultGradeOrder is the default ordering of Grade.
var DefaultGradeOrder = &GradeOrder{
	Direction: OrderDirectionAsc,
	Field: &GradeOrderField{
		field: grade.FieldID,
		toCursor: func(gr *Grade) Cursor {
			return Cursor{ID: gr.ID}
		},
	},
}

// ToEdge converts Grade into GradeEdge.
func (gr *Grade) ToEdge(order *GradeOrder) *GradeEdge {
	if order == nil {
		order = DefaultGradeOrder
	}
	return &GradeEdge{
		Node:   gr,
		Cursor: order.Field.toCursor(gr),
	}
}

// GroupEdge is the edge representation of Group.
type GroupEdge struct {
	Node   *Group `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// GroupConnection is the connection containing edges to Group.
type GroupConnection struct {
	Edges      []*GroupEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// GroupPaginateOption enables pagination customization.
type GroupPaginateOption func(*groupPager) error

// WithGroupOrder configures pagination ordering.
func WithGroupOrder(order *GroupOrder) GroupPaginateOption {
	if order == nil {
		order = DefaultGroupOrder
	}
	o := *order
	return func(pager *groupPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGroupOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGroupFilter configures pagination filter.
func WithGroupFilter(filter func(*GroupQuery) (*GroupQuery, error)) GroupPaginateOption {
	return func(pager *groupPager) error {
		if filter == nil {
			return errors.New("GroupQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type groupPager struct {
	order  *GroupOrder
	filter func(*GroupQuery) (*GroupQuery, error)
}

func newGroupPager(opts []GroupPaginateOption) (*groupPager, error) {
	pager := &groupPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGroupOrder
	}
	return pager, nil
}

func (p *groupPager) applyFilter(query *GroupQuery) (*GroupQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *groupPager) toCursor(gr *Group) Cursor {
	return p.order.Field.toCursor(gr)
}

func (p *groupPager) applyCursors(query *GroupQuery, after, before *Cursor) *GroupQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGroupOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *groupPager) applyOrder(query *GroupQuery, reverse bool) *GroupQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGroupOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGroupOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Group.
func (gr *GroupQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GroupPaginateOption,
) (*GroupConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGroupPager(opts)
	if err != nil {
		return nil, err
	}

	if gr, err = pager.applyFilter(gr); err != nil {
		return nil, err
	}

	conn := &GroupConnection{Edges: []*GroupEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := gr.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := gr.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	gr = pager.applyCursors(gr, after, before)
	gr = pager.applyOrder(gr, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		gr = gr.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		gr = gr.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := gr.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Group
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Group {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Group {
			return nodes[i]
		}
	}

	conn.Edges = make([]*GroupEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &GroupEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// GroupOrderFieldCreatedAt orders Group by created_at.
	GroupOrderFieldCreatedAt = &GroupOrderField{
		field: group.FieldCreatedAt,
		toCursor: func(gr *Group) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.CreatedAt,
			}
		},
	}
	// GroupOrderFieldUpdatedAt orders Group by updated_at.
	GroupOrderFieldUpdatedAt = &GroupOrderField{
		field: group.FieldUpdatedAt,
		toCursor: func(gr *Group) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GroupOrderField) String() string {
	var str string
	switch f.field {
	case group.FieldCreatedAt:
		str = "CREATED_AT"
	case group.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GroupOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GroupOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GroupOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *GroupOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *GroupOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid GroupOrderField", str)
	}
	return nil
}

// GroupOrderField defines the ordering field of Group.
type GroupOrderField struct {
	field    string
	toCursor func(*Group) Cursor
}

// GroupOrder defines the ordering of Group.
type GroupOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *GroupOrderField `json:"field"`
}

// DefaultGroupOrder is the default ordering of Group.
var DefaultGroupOrder = &GroupOrder{
	Direction: OrderDirectionAsc,
	Field: &GroupOrderField{
		field: group.FieldID,
		toCursor: func(gr *Group) Cursor {
			return Cursor{ID: gr.ID}
		},
	},
}

// ToEdge converts Group into GroupEdge.
func (gr *Group) ToEdge(order *GroupOrder) *GroupEdge {
	if order == nil {
		order = DefaultGroupOrder
	}
	return &GroupEdge{
		Node:   gr,
		Cursor: order.Field.toCursor(gr),
	}
}

// MessageEdge is the edge representation of Message.
type MessageEdge struct {
	Node   *Message `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// MessageConnection is the connection containing edges to Message.
type MessageConnection struct {
	Edges      []*MessageEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// MessagePaginateOption enables pagination customization.
type MessagePaginateOption func(*messagePager) error

// WithMessageOrder configures pagination ordering.
func WithMessageOrder(order *MessageOrder) MessagePaginateOption {
	if order == nil {
		order = DefaultMessageOrder
	}
	o := *order
	return func(pager *messagePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMessageOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMessageFilter configures pagination filter.
func WithMessageFilter(filter func(*MessageQuery) (*MessageQuery, error)) MessagePaginateOption {
	return func(pager *messagePager) error {
		if filter == nil {
			return errors.New("MessageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type messagePager struct {
	order  *MessageOrder
	filter func(*MessageQuery) (*MessageQuery, error)
}

func newMessagePager(opts []MessagePaginateOption) (*messagePager, error) {
	pager := &messagePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMessageOrder
	}
	return pager, nil
}

func (p *messagePager) applyFilter(query *MessageQuery) (*MessageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *messagePager) toCursor(m *Message) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *messagePager) applyCursors(query *MessageQuery, after, before *Cursor) *MessageQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultMessageOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *messagePager) applyOrder(query *MessageQuery, reverse bool) *MessageQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultMessageOrder.Field {
		query = query.Order(direction.orderFunc(DefaultMessageOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Message.
func (m *MessageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MessagePaginateOption,
) (*MessageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMessagePager(opts)
	if err != nil {
		return nil, err
	}

	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}

	conn := &MessageConnection{Edges: []*MessageEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := m.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := m.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	m = pager.applyCursors(m, after, before)
	m = pager.applyOrder(m, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		m = m.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		m = m.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := m.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Message
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Message {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Message {
			return nodes[i]
		}
	}

	conn.Edges = make([]*MessageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &MessageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// MessageOrderFieldCreatedAt orders Message by created_at.
	MessageOrderFieldCreatedAt = &MessageOrderField{
		field: message.FieldCreatedAt,
		toCursor: func(m *Message) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.CreatedAt,
			}
		},
	}
	// MessageOrderFieldUpdatedAt orders Message by updated_at.
	MessageOrderFieldUpdatedAt = &MessageOrderField{
		field: message.FieldUpdatedAt,
		toCursor: func(m *Message) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MessageOrderField) String() string {
	var str string
	switch f.field {
	case message.FieldCreatedAt:
		str = "CREATED_AT"
	case message.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MessageOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MessageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MessageOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *MessageOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *MessageOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid MessageOrderField", str)
	}
	return nil
}

// MessageOrderField defines the ordering field of Message.
type MessageOrderField struct {
	field    string
	toCursor func(*Message) Cursor
}

// MessageOrder defines the ordering of Message.
type MessageOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *MessageOrderField `json:"field"`
}

// DefaultMessageOrder is the default ordering of Message.
var DefaultMessageOrder = &MessageOrder{
	Direction: OrderDirectionAsc,
	Field: &MessageOrderField{
		field: message.FieldID,
		toCursor: func(m *Message) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Message into MessageEdge.
func (m *Message) ToEdge(order *MessageOrder) *MessageEdge {
	if order == nil {
		order = DefaultMessageOrder
	}
	return &MessageEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// ScheduleEdge is the edge representation of Schedule.
type ScheduleEdge struct {
	Node   *Schedule `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ScheduleConnection is the connection containing edges to Schedule.
type ScheduleConnection struct {
	Edges      []*ScheduleEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// SchedulePaginateOption enables pagination customization.
type SchedulePaginateOption func(*schedulePager) error

// WithScheduleOrder configures pagination ordering.
func WithScheduleOrder(order *ScheduleOrder) SchedulePaginateOption {
	if order == nil {
		order = DefaultScheduleOrder
	}
	o := *order
	return func(pager *schedulePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultScheduleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithScheduleFilter configures pagination filter.
func WithScheduleFilter(filter func(*ScheduleQuery) (*ScheduleQuery, error)) SchedulePaginateOption {
	return func(pager *schedulePager) error {
		if filter == nil {
			return errors.New("ScheduleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type schedulePager struct {
	order  *ScheduleOrder
	filter func(*ScheduleQuery) (*ScheduleQuery, error)
}

func newSchedulePager(opts []SchedulePaginateOption) (*schedulePager, error) {
	pager := &schedulePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultScheduleOrder
	}
	return pager, nil
}

func (p *schedulePager) applyFilter(query *ScheduleQuery) (*ScheduleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *schedulePager) toCursor(s *Schedule) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *schedulePager) applyCursors(query *ScheduleQuery, after, before *Cursor) *ScheduleQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultScheduleOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *schedulePager) applyOrder(query *ScheduleQuery, reverse bool) *ScheduleQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultScheduleOrder.Field {
		query = query.Order(direction.orderFunc(DefaultScheduleOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Schedule.
func (s *ScheduleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SchedulePaginateOption,
) (*ScheduleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSchedulePager(opts)
	if err != nil {
		return nil, err
	}

	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}

	conn := &ScheduleConnection{Edges: []*ScheduleEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := s.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := s.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	s = pager.applyCursors(s, after, before)
	s = pager.applyOrder(s, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		s = s.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := s.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Schedule
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Schedule {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Schedule {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ScheduleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ScheduleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ScheduleOrderField defines the ordering field of Schedule.
type ScheduleOrderField struct {
	field    string
	toCursor func(*Schedule) Cursor
}

// ScheduleOrder defines the ordering of Schedule.
type ScheduleOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ScheduleOrderField `json:"field"`
}

// DefaultScheduleOrder is the default ordering of Schedule.
var DefaultScheduleOrder = &ScheduleOrder{
	Direction: OrderDirectionAsc,
	Field: &ScheduleOrderField{
		field: schedule.FieldID,
		toCursor: func(s *Schedule) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Schedule into ScheduleEdge.
func (s *Schedule) ToEdge(order *ScheduleOrder) *ScheduleEdge {
	if order == nil {
		order = DefaultScheduleOrder
	}
	return &ScheduleEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// SchoolEdge is the edge representation of School.
type SchoolEdge struct {
	Node   *School `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// SchoolConnection is the connection containing edges to School.
type SchoolConnection struct {
	Edges      []*SchoolEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

// SchoolPaginateOption enables pagination customization.
type SchoolPaginateOption func(*schoolPager) error

// WithSchoolOrder configures pagination ordering.
func WithSchoolOrder(order *SchoolOrder) SchoolPaginateOption {
	if order == nil {
		order = DefaultSchoolOrder
	}
	o := *order
	return func(pager *schoolPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSchoolOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSchoolFilter configures pagination filter.
func WithSchoolFilter(filter func(*SchoolQuery) (*SchoolQuery, error)) SchoolPaginateOption {
	return func(pager *schoolPager) error {
		if filter == nil {
			return errors.New("SchoolQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type schoolPager struct {
	order  *SchoolOrder
	filter func(*SchoolQuery) (*SchoolQuery, error)
}

func newSchoolPager(opts []SchoolPaginateOption) (*schoolPager, error) {
	pager := &schoolPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSchoolOrder
	}
	return pager, nil
}

func (p *schoolPager) applyFilter(query *SchoolQuery) (*SchoolQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *schoolPager) toCursor(s *School) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *schoolPager) applyCursors(query *SchoolQuery, after, before *Cursor) *SchoolQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSchoolOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *schoolPager) applyOrder(query *SchoolQuery, reverse bool) *SchoolQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSchoolOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSchoolOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to School.
func (s *SchoolQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SchoolPaginateOption,
) (*SchoolConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSchoolPager(opts)
	if err != nil {
		return nil, err
	}

	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}

	conn := &SchoolConnection{Edges: []*SchoolEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := s.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := s.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	s = pager.applyCursors(s, after, before)
	s = pager.applyOrder(s, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		s = s.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := s.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *School
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *School {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *School {
			return nodes[i]
		}
	}

	conn.Edges = make([]*SchoolEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &SchoolEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// SchoolOrderFieldCreatedAt orders School by created_at.
	SchoolOrderFieldCreatedAt = &SchoolOrderField{
		field: school.FieldCreatedAt,
		toCursor: func(s *School) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.CreatedAt,
			}
		},
	}
	// SchoolOrderFieldUpdatedAt orders School by updated_at.
	SchoolOrderFieldUpdatedAt = &SchoolOrderField{
		field: school.FieldUpdatedAt,
		toCursor: func(s *School) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.UpdatedAt,
			}
		},
	}
	// SchoolOrderFieldName orders School by name.
	SchoolOrderFieldName = &SchoolOrderField{
		field: school.FieldName,
		toCursor: func(s *School) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Name,
			}
		},
	}
	// SchoolOrderFieldStatus orders School by status.
	SchoolOrderFieldStatus = &SchoolOrderField{
		field: school.FieldStatus,
		toCursor: func(s *School) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Status,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f SchoolOrderField) String() string {
	var str string
	switch f.field {
	case school.FieldCreatedAt:
		str = "CREATED_AT"
	case school.FieldUpdatedAt:
		str = "UPDATED_AT"
	case school.FieldName:
		str = "NAME"
	case school.FieldStatus:
		str = "STATUS"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f SchoolOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *SchoolOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("SchoolOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *SchoolOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *SchoolOrderFieldUpdatedAt
	case "NAME":
		*f = *SchoolOrderFieldName
	case "STATUS":
		*f = *SchoolOrderFieldStatus
	default:
		return fmt.Errorf("%s is not a valid SchoolOrderField", str)
	}
	return nil
}

// SchoolOrderField defines the ordering field of School.
type SchoolOrderField struct {
	field    string
	toCursor func(*School) Cursor
}

// SchoolOrder defines the ordering of School.
type SchoolOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *SchoolOrderField `json:"field"`
}

// DefaultSchoolOrder is the default ordering of School.
var DefaultSchoolOrder = &SchoolOrder{
	Direction: OrderDirectionAsc,
	Field: &SchoolOrderField{
		field: school.FieldID,
		toCursor: func(s *School) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts School into SchoolEdge.
func (s *School) ToEdge(order *SchoolOrder) *SchoolEdge {
	if order == nil {
		order = DefaultSchoolOrder
	}
	return &SchoolEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// StageEdge is the edge representation of Stage.
type StageEdge struct {
	Node   *Stage `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// StageConnection is the connection containing edges to Stage.
type StageConnection struct {
	Edges      []*StageEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// StagePaginateOption enables pagination customization.
type StagePaginateOption func(*stagePager) error

// WithStageOrder configures pagination ordering.
func WithStageOrder(order *StageOrder) StagePaginateOption {
	if order == nil {
		order = DefaultStageOrder
	}
	o := *order
	return func(pager *stagePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultStageOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithStageFilter configures pagination filter.
func WithStageFilter(filter func(*StageQuery) (*StageQuery, error)) StagePaginateOption {
	return func(pager *stagePager) error {
		if filter == nil {
			return errors.New("StageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type stagePager struct {
	order  *StageOrder
	filter func(*StageQuery) (*StageQuery, error)
}

func newStagePager(opts []StagePaginateOption) (*stagePager, error) {
	pager := &stagePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultStageOrder
	}
	return pager, nil
}

func (p *stagePager) applyFilter(query *StageQuery) (*StageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *stagePager) toCursor(s *Stage) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *stagePager) applyCursors(query *StageQuery, after, before *Cursor) *StageQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultStageOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *stagePager) applyOrder(query *StageQuery, reverse bool) *StageQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultStageOrder.Field {
		query = query.Order(direction.orderFunc(DefaultStageOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Stage.
func (s *StageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...StagePaginateOption,
) (*StageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newStagePager(opts)
	if err != nil {
		return nil, err
	}

	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}

	conn := &StageConnection{Edges: []*StageEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := s.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := s.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	s = pager.applyCursors(s, after, before)
	s = pager.applyOrder(s, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		s = s.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := s.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Stage
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Stage {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Stage {
			return nodes[i]
		}
	}

	conn.Edges = make([]*StageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &StageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// StageOrderFieldCreatedAt orders Stage by created_at.
	StageOrderFieldCreatedAt = &StageOrderField{
		field: stage.FieldCreatedAt,
		toCursor: func(s *Stage) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.CreatedAt,
			}
		},
	}
	// StageOrderFieldUpdatedAt orders Stage by updated_at.
	StageOrderFieldUpdatedAt = &StageOrderField{
		field: stage.FieldUpdatedAt,
		toCursor: func(s *Stage) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f StageOrderField) String() string {
	var str string
	switch f.field {
	case stage.FieldCreatedAt:
		str = "CREATED_AT"
	case stage.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f StageOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *StageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("StageOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *StageOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *StageOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid StageOrderField", str)
	}
	return nil
}

// StageOrderField defines the ordering field of Stage.
type StageOrderField struct {
	field    string
	toCursor func(*Stage) Cursor
}

// StageOrder defines the ordering of Stage.
type StageOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *StageOrderField `json:"field"`
}

// DefaultStageOrder is the default ordering of Stage.
var DefaultStageOrder = &StageOrder{
	Direction: OrderDirectionAsc,
	Field: &StageOrderField{
		field: stage.FieldID,
		toCursor: func(s *Stage) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Stage into StageEdge.
func (s *Stage) ToEdge(order *StageOrder) *StageEdge {
	if order == nil {
		order = DefaultStageOrder
	}
	return &StageEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// TuitionPaymentEdge is the edge representation of TuitionPayment.
type TuitionPaymentEdge struct {
	Node   *TuitionPayment `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// TuitionPaymentConnection is the connection containing edges to TuitionPayment.
type TuitionPaymentConnection struct {
	Edges      []*TuitionPaymentEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

// TuitionPaymentPaginateOption enables pagination customization.
type TuitionPaymentPaginateOption func(*tuitionPaymentPager) error

// WithTuitionPaymentOrder configures pagination ordering.
func WithTuitionPaymentOrder(order *TuitionPaymentOrder) TuitionPaymentPaginateOption {
	if order == nil {
		order = DefaultTuitionPaymentOrder
	}
	o := *order
	return func(pager *tuitionPaymentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTuitionPaymentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTuitionPaymentFilter configures pagination filter.
func WithTuitionPaymentFilter(filter func(*TuitionPaymentQuery) (*TuitionPaymentQuery, error)) TuitionPaymentPaginateOption {
	return func(pager *tuitionPaymentPager) error {
		if filter == nil {
			return errors.New("TuitionPaymentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tuitionPaymentPager struct {
	order  *TuitionPaymentOrder
	filter func(*TuitionPaymentQuery) (*TuitionPaymentQuery, error)
}

func newTuitionPaymentPager(opts []TuitionPaymentPaginateOption) (*tuitionPaymentPager, error) {
	pager := &tuitionPaymentPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTuitionPaymentOrder
	}
	return pager, nil
}

func (p *tuitionPaymentPager) applyFilter(query *TuitionPaymentQuery) (*TuitionPaymentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tuitionPaymentPager) toCursor(tp *TuitionPayment) Cursor {
	return p.order.Field.toCursor(tp)
}

func (p *tuitionPaymentPager) applyCursors(query *TuitionPaymentQuery, after, before *Cursor) *TuitionPaymentQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTuitionPaymentOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *tuitionPaymentPager) applyOrder(query *TuitionPaymentQuery, reverse bool) *TuitionPaymentQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTuitionPaymentOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTuitionPaymentOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TuitionPayment.
func (tp *TuitionPaymentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TuitionPaymentPaginateOption,
) (*TuitionPaymentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTuitionPaymentPager(opts)
	if err != nil {
		return nil, err
	}

	if tp, err = pager.applyFilter(tp); err != nil {
		return nil, err
	}

	conn := &TuitionPaymentConnection{Edges: []*TuitionPaymentEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tp.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tp.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tp = pager.applyCursors(tp, after, before)
	tp = pager.applyOrder(tp, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tp = tp.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tp = tp.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tp.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TuitionPayment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TuitionPayment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TuitionPayment {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TuitionPaymentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TuitionPaymentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// TuitionPaymentOrderFieldCreatedAt orders TuitionPayment by created_at.
	TuitionPaymentOrderFieldCreatedAt = &TuitionPaymentOrderField{
		field: tuitionpayment.FieldCreatedAt,
		toCursor: func(tp *TuitionPayment) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.CreatedAt,
			}
		},
	}
	// TuitionPaymentOrderFieldUpdatedAt orders TuitionPayment by updated_at.
	TuitionPaymentOrderFieldUpdatedAt = &TuitionPaymentOrderField{
		field: tuitionpayment.FieldUpdatedAt,
		toCursor: func(tp *TuitionPayment) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TuitionPaymentOrderField) String() string {
	var str string
	switch f.field {
	case tuitionpayment.FieldCreatedAt:
		str = "CREATED_AT"
	case tuitionpayment.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TuitionPaymentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TuitionPaymentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TuitionPaymentOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TuitionPaymentOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *TuitionPaymentOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid TuitionPaymentOrderField", str)
	}
	return nil
}

// TuitionPaymentOrderField defines the ordering field of TuitionPayment.
type TuitionPaymentOrderField struct {
	field    string
	toCursor func(*TuitionPayment) Cursor
}

// TuitionPaymentOrder defines the ordering of TuitionPayment.
type TuitionPaymentOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *TuitionPaymentOrderField `json:"field"`
}

// DefaultTuitionPaymentOrder is the default ordering of TuitionPayment.
var DefaultTuitionPaymentOrder = &TuitionPaymentOrder{
	Direction: OrderDirectionAsc,
	Field: &TuitionPaymentOrderField{
		field: tuitionpayment.FieldID,
		toCursor: func(tp *TuitionPayment) Cursor {
			return Cursor{ID: tp.ID}
		},
	},
}

// ToEdge converts TuitionPayment into TuitionPaymentEdge.
func (tp *TuitionPayment) ToEdge(order *TuitionPaymentOrder) *TuitionPaymentEdge {
	if order == nil {
		order = DefaultTuitionPaymentOrder
	}
	return &TuitionPaymentEdge{
		Node:   tp,
		Cursor: order.Field.toCursor(tp),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}

	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}

	conn := &UserConnection{Edges: []*UserEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := u.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := u.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		u = u.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := u.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		field: user.FieldCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
	// UserOrderFieldUpdatedAt orders User by updated_at.
	UserOrderFieldUpdatedAt = &UserOrderField{
		field: user.FieldUpdatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.field {
	case user.FieldCreatedAt:
		str = "CREATED_AT"
	case user.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *UserOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
