// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"github.com/msal4/hassah_school_server/ent/schema"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldTokenVersion holds the string denoting the token_version field in the database.
	FieldTokenVersion = "token_version"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeStage holds the string denoting the stage edge name in mutations.
	EdgeStage = "stage"
	// EdgeSchool holds the string denoting the school edge name in mutations.
	EdgeSchool = "school"
	// EdgeClasses holds the string denoting the classes edge name in mutations.
	EdgeClasses = "classes"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// EdgeSubmissions holds the string denoting the submissions edge name in mutations.
	EdgeSubmissions = "submissions"
	// EdgeAttendances holds the string denoting the attendances edge name in mutations.
	EdgeAttendances = "attendances"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// EdgeGrades holds the string denoting the grades edge name in mutations.
	EdgeGrades = "grades"
	// Table holds the table name of the user in the database.
	Table = "users"
	// StageTable is the table that holds the stage relation/edge.
	StageTable = "users"
	// StageInverseTable is the table name for the Stage entity.
	// It exists in this package in order to avoid circular dependency with the "stage" package.
	StageInverseTable = "stages"
	// StageColumn is the table column denoting the stage relation/edge.
	StageColumn = "stage_students"
	// SchoolTable is the table that holds the school relation/edge.
	SchoolTable = "users"
	// SchoolInverseTable is the table name for the School entity.
	// It exists in this package in order to avoid circular dependency with the "school" package.
	SchoolInverseTable = "schools"
	// SchoolColumn is the table column denoting the school relation/edge.
	SchoolColumn = "school_users"
	// ClassesTable is the table that holds the classes relation/edge.
	ClassesTable = "classes"
	// ClassesInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassesInverseTable = "classes"
	// ClassesColumn is the table column denoting the classes relation/edge.
	ClassesColumn = "user_classes"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "user_messages"
	// SubmissionsTable is the table that holds the submissions relation/edge.
	SubmissionsTable = "assignment_submissions"
	// SubmissionsInverseTable is the table name for the AssignmentSubmission entity.
	// It exists in this package in order to avoid circular dependency with the "assignmentsubmission" package.
	SubmissionsInverseTable = "assignment_submissions"
	// SubmissionsColumn is the table column denoting the submissions relation/edge.
	SubmissionsColumn = "user_submissions"
	// AttendancesTable is the table that holds the attendances relation/edge.
	AttendancesTable = "attendances"
	// AttendancesInverseTable is the table name for the Attendance entity.
	// It exists in this package in order to avoid circular dependency with the "attendance" package.
	AttendancesInverseTable = "attendances"
	// AttendancesColumn is the table column denoting the attendances relation/edge.
	AttendancesColumn = "user_attendances"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "tuition_payments"
	// PaymentsInverseTable is the table name for the TuitionPayment entity.
	// It exists in this package in order to avoid circular dependency with the "tuitionpayment" package.
	PaymentsInverseTable = "tuition_payments"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "user_payments"
	// GradesTable is the table that holds the grades relation/edge.
	GradesTable = "grades"
	// GradesInverseTable is the table name for the Grade entity.
	// It exists in this package in order to avoid circular dependency with the "grade" package.
	GradesInverseTable = "grades"
	// GradesColumn is the table column denoting the grades relation/edge.
	GradesColumn = "user_grades"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldUsername,
	FieldPassword,
	FieldPhone,
	FieldImage,
	FieldTokenVersion,
	FieldRole,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"school_users",
	"stage_students",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// DefaultTokenVersion holds the default value on creation for the "token_version" field.
	DefaultTokenVersion int
)

// Role defines the type for the "role" enum field.
type Role string

// RoleStudent is the default value of the Role enum.
const DefaultRole = RoleStudent

// Role values.
const (
	RoleSuperAdmin  Role = "super_admin"
	RoleSchoolAdmin Role = "school_admin"
	RoleTeacher     Role = "teacher"
	RoleStudent     Role = "student"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleSuperAdmin, RoleSchoolAdmin, RoleTeacher, RoleStudent:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

const DefaultStatus schema.Status = "active"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s schema.Status) error {
	switch s {
	case "deleted", "disabled", "active":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}
