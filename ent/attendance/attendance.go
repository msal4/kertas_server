// Code generated by entc, DO NOT EDIT.

package attendance

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the attendance type in the database.
	Label = "attendance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// Table holds the table name of the attendance in the database.
	Table = "attendances"
	// ClassTable is the table that holds the class relation/edge.
	ClassTable = "attendances"
	// ClassInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassInverseTable = "classes"
	// ClassColumn is the table column denoting the class relation/edge.
	ClassColumn = "class_attendances"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "attendances"
	// StudentInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	StudentInverseTable = "users"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "user_attendances"
)

// Columns holds all SQL columns for attendance fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDate,
	FieldState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "attendances"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"class_attendances",
	"user_attendances",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// State defines the type for the "state" enum field.
type State string

// StatePresent is the default value of the State enum.
const DefaultState = StatePresent

// State values.
const (
	StatePresent        State = "PRESENT"
	StateAbsent         State = "ABSENT"
	StateExcusedAbsence State = "EXCUSED_ABSENCE"
	StateSick           State = "SICK"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StatePresent, StateAbsent, StateExcusedAbsence, StateSick:
		return nil
	default:
		return fmt.Errorf("attendance: invalid enum value for state field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (s State) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(s.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (s *State) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*s = State(str)
	if err := StateValidator(*s); err != nil {
		return fmt.Errorf("%s is not a valid State", str)
	}
	return nil
}
