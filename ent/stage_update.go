// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/msal4/hassah_school_server/ent/class"
	"github.com/msal4/hassah_school_server/ent/predicate"
	"github.com/msal4/hassah_school_server/ent/school"
	"github.com/msal4/hassah_school_server/ent/stage"
	"github.com/msal4/hassah_school_server/ent/tuitionpayment"
	"github.com/msal4/hassah_school_server/ent/user"
)

// StageUpdate is the builder for updating Stage entities.
type StageUpdate struct {
	config
	hooks    []Hook
	mutation *StageMutation
}

// Where appends a list predicates to the StageUpdate builder.
func (su *StageUpdate) Where(ps ...predicate.Stage) *StageUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *StageUpdate) SetName(s string) *StageUpdate {
	su.mutation.SetName(s)
	return su
}

// SetTuitionAmount sets the "tuition_amount" field.
func (su *StageUpdate) SetTuitionAmount(i int) *StageUpdate {
	su.mutation.ResetTuitionAmount()
	su.mutation.SetTuitionAmount(i)
	return su
}

// AddTuitionAmount adds i to the "tuition_amount" field.
func (su *StageUpdate) AddTuitionAmount(i int) *StageUpdate {
	su.mutation.AddTuitionAmount(i)
	return su
}

// SetDirectory sets the "directory" field.
func (su *StageUpdate) SetDirectory(s string) *StageUpdate {
	su.mutation.SetDirectory(s)
	return su
}

// SetActive sets the "active" field.
func (su *StageUpdate) SetActive(b bool) *StageUpdate {
	su.mutation.SetActive(b)
	return su
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (su *StageUpdate) SetNillableActive(b *bool) *StageUpdate {
	if b != nil {
		su.SetActive(*b)
	}
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StageUpdate) SetDeletedAt(t time.Time) *StageUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StageUpdate) SetNillableDeletedAt(t *time.Time) *StageUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *StageUpdate) ClearDeletedAt() *StageUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetSchoolID sets the "school" edge to the School entity by ID.
func (su *StageUpdate) SetSchoolID(id uuid.UUID) *StageUpdate {
	su.mutation.SetSchoolID(id)
	return su
}

// SetSchool sets the "school" edge to the School entity.
func (su *StageUpdate) SetSchool(s *School) *StageUpdate {
	return su.SetSchoolID(s.ID)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (su *StageUpdate) AddClassIDs(ids ...uuid.UUID) *StageUpdate {
	su.mutation.AddClassIDs(ids...)
	return su
}

// AddClasses adds the "classes" edges to the Class entity.
func (su *StageUpdate) AddClasses(c ...*Class) *StageUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddClassIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the TuitionPayment entity by IDs.
func (su *StageUpdate) AddPaymentIDs(ids ...uuid.UUID) *StageUpdate {
	su.mutation.AddPaymentIDs(ids...)
	return su
}

// AddPayments adds the "payments" edges to the TuitionPayment entity.
func (su *StageUpdate) AddPayments(t ...*TuitionPayment) *StageUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddPaymentIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the User entity by IDs.
func (su *StageUpdate) AddStudentIDs(ids ...uuid.UUID) *StageUpdate {
	su.mutation.AddStudentIDs(ids...)
	return su
}

// AddStudents adds the "students" edges to the User entity.
func (su *StageUpdate) AddStudents(u ...*User) *StageUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddStudentIDs(ids...)
}

// Mutation returns the StageMutation object of the builder.
func (su *StageUpdate) Mutation() *StageMutation {
	return su.mutation
}

// ClearSchool clears the "school" edge to the School entity.
func (su *StageUpdate) ClearSchool() *StageUpdate {
	su.mutation.ClearSchool()
	return su
}

// ClearClasses clears all "classes" edges to the Class entity.
func (su *StageUpdate) ClearClasses() *StageUpdate {
	su.mutation.ClearClasses()
	return su
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (su *StageUpdate) RemoveClassIDs(ids ...uuid.UUID) *StageUpdate {
	su.mutation.RemoveClassIDs(ids...)
	return su
}

// RemoveClasses removes "classes" edges to Class entities.
func (su *StageUpdate) RemoveClasses(c ...*Class) *StageUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveClassIDs(ids...)
}

// ClearPayments clears all "payments" edges to the TuitionPayment entity.
func (su *StageUpdate) ClearPayments() *StageUpdate {
	su.mutation.ClearPayments()
	return su
}

// RemovePaymentIDs removes the "payments" edge to TuitionPayment entities by IDs.
func (su *StageUpdate) RemovePaymentIDs(ids ...uuid.UUID) *StageUpdate {
	su.mutation.RemovePaymentIDs(ids...)
	return su
}

// RemovePayments removes "payments" edges to TuitionPayment entities.
func (su *StageUpdate) RemovePayments(t ...*TuitionPayment) *StageUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemovePaymentIDs(ids...)
}

// ClearStudents clears all "students" edges to the User entity.
func (su *StageUpdate) ClearStudents() *StageUpdate {
	su.mutation.ClearStudents()
	return su
}

// RemoveStudentIDs removes the "students" edge to User entities by IDs.
func (su *StageUpdate) RemoveStudentIDs(ids ...uuid.UUID) *StageUpdate {
	su.mutation.RemoveStudentIDs(ids...)
	return su
}

// RemoveStudents removes "students" edges to User entities.
func (su *StageUpdate) RemoveStudents(u ...*User) *StageUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveStudentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StageUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StageUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StageUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StageUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := stage.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StageUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := stage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := su.mutation.TuitionAmount(); ok {
		if err := stage.TuitionAmountValidator(v); err != nil {
			return &ValidationError{Name: "tuition_amount", err: fmt.Errorf("ent: validator failed for field \"tuition_amount\": %w", err)}
		}
	}
	if _, ok := su.mutation.SchoolID(); su.mutation.SchoolCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"school\"")
	}
	return nil
}

func (su *StageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stage.Table,
			Columns: stage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: stage.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stage.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stage.FieldName,
		})
	}
	if value, ok := su.mutation.TuitionAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stage.FieldTuitionAmount,
		})
	}
	if value, ok := su.mutation.AddedTuitionAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stage.FieldTuitionAmount,
		})
	}
	if value, ok := su.mutation.Directory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stage.FieldDirectory,
		})
	}
	if value, ok := su.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stage.FieldActive,
		})
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stage.FieldDeletedAt,
		})
	}
	if su.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: stage.FieldDeletedAt,
		})
	}
	if su.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.SchoolTable,
			Columns: []string{stage.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: school.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.SchoolTable,
			Columns: []string{stage.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.ClassesTable,
			Columns: []string{stage.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedClassesIDs(); len(nodes) > 0 && !su.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.ClassesTable,
			Columns: []string{stage.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.ClassesTable,
			Columns: []string{stage.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.PaymentsTable,
			Columns: []string{stage.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tuitionpayment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !su.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.PaymentsTable,
			Columns: []string{stage.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tuitionpayment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.PaymentsTable,
			Columns: []string{stage.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tuitionpayment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.StudentsTable,
			Columns: []string{stage.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !su.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.StudentsTable,
			Columns: []string{stage.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.StudentsTable,
			Columns: []string{stage.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StageUpdateOne is the builder for updating a single Stage entity.
type StageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StageMutation
}

// SetName sets the "name" field.
func (suo *StageUpdateOne) SetName(s string) *StageUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetTuitionAmount sets the "tuition_amount" field.
func (suo *StageUpdateOne) SetTuitionAmount(i int) *StageUpdateOne {
	suo.mutation.ResetTuitionAmount()
	suo.mutation.SetTuitionAmount(i)
	return suo
}

// AddTuitionAmount adds i to the "tuition_amount" field.
func (suo *StageUpdateOne) AddTuitionAmount(i int) *StageUpdateOne {
	suo.mutation.AddTuitionAmount(i)
	return suo
}

// SetDirectory sets the "directory" field.
func (suo *StageUpdateOne) SetDirectory(s string) *StageUpdateOne {
	suo.mutation.SetDirectory(s)
	return suo
}

// SetActive sets the "active" field.
func (suo *StageUpdateOne) SetActive(b bool) *StageUpdateOne {
	suo.mutation.SetActive(b)
	return suo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (suo *StageUpdateOne) SetNillableActive(b *bool) *StageUpdateOne {
	if b != nil {
		suo.SetActive(*b)
	}
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StageUpdateOne) SetDeletedAt(t time.Time) *StageUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StageUpdateOne) SetNillableDeletedAt(t *time.Time) *StageUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *StageUpdateOne) ClearDeletedAt() *StageUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetSchoolID sets the "school" edge to the School entity by ID.
func (suo *StageUpdateOne) SetSchoolID(id uuid.UUID) *StageUpdateOne {
	suo.mutation.SetSchoolID(id)
	return suo
}

// SetSchool sets the "school" edge to the School entity.
func (suo *StageUpdateOne) SetSchool(s *School) *StageUpdateOne {
	return suo.SetSchoolID(s.ID)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (suo *StageUpdateOne) AddClassIDs(ids ...uuid.UUID) *StageUpdateOne {
	suo.mutation.AddClassIDs(ids...)
	return suo
}

// AddClasses adds the "classes" edges to the Class entity.
func (suo *StageUpdateOne) AddClasses(c ...*Class) *StageUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddClassIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the TuitionPayment entity by IDs.
func (suo *StageUpdateOne) AddPaymentIDs(ids ...uuid.UUID) *StageUpdateOne {
	suo.mutation.AddPaymentIDs(ids...)
	return suo
}

// AddPayments adds the "payments" edges to the TuitionPayment entity.
func (suo *StageUpdateOne) AddPayments(t ...*TuitionPayment) *StageUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddPaymentIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the User entity by IDs.
func (suo *StageUpdateOne) AddStudentIDs(ids ...uuid.UUID) *StageUpdateOne {
	suo.mutation.AddStudentIDs(ids...)
	return suo
}

// AddStudents adds the "students" edges to the User entity.
func (suo *StageUpdateOne) AddStudents(u ...*User) *StageUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddStudentIDs(ids...)
}

// Mutation returns the StageMutation object of the builder.
func (suo *StageUpdateOne) Mutation() *StageMutation {
	return suo.mutation
}

// ClearSchool clears the "school" edge to the School entity.
func (suo *StageUpdateOne) ClearSchool() *StageUpdateOne {
	suo.mutation.ClearSchool()
	return suo
}

// ClearClasses clears all "classes" edges to the Class entity.
func (suo *StageUpdateOne) ClearClasses() *StageUpdateOne {
	suo.mutation.ClearClasses()
	return suo
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (suo *StageUpdateOne) RemoveClassIDs(ids ...uuid.UUID) *StageUpdateOne {
	suo.mutation.RemoveClassIDs(ids...)
	return suo
}

// RemoveClasses removes "classes" edges to Class entities.
func (suo *StageUpdateOne) RemoveClasses(c ...*Class) *StageUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveClassIDs(ids...)
}

// ClearPayments clears all "payments" edges to the TuitionPayment entity.
func (suo *StageUpdateOne) ClearPayments() *StageUpdateOne {
	suo.mutation.ClearPayments()
	return suo
}

// RemovePaymentIDs removes the "payments" edge to TuitionPayment entities by IDs.
func (suo *StageUpdateOne) RemovePaymentIDs(ids ...uuid.UUID) *StageUpdateOne {
	suo.mutation.RemovePaymentIDs(ids...)
	return suo
}

// RemovePayments removes "payments" edges to TuitionPayment entities.
func (suo *StageUpdateOne) RemovePayments(t ...*TuitionPayment) *StageUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemovePaymentIDs(ids...)
}

// ClearStudents clears all "students" edges to the User entity.
func (suo *StageUpdateOne) ClearStudents() *StageUpdateOne {
	suo.mutation.ClearStudents()
	return suo
}

// RemoveStudentIDs removes the "students" edge to User entities by IDs.
func (suo *StageUpdateOne) RemoveStudentIDs(ids ...uuid.UUID) *StageUpdateOne {
	suo.mutation.RemoveStudentIDs(ids...)
	return suo
}

// RemoveStudents removes "students" edges to User entities.
func (suo *StageUpdateOne) RemoveStudents(u ...*User) *StageUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveStudentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StageUpdateOne) Select(field string, fields ...string) *StageUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stage entity.
func (suo *StageUpdateOne) Save(ctx context.Context) (*Stage, error) {
	var (
		err  error
		node *Stage
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StageUpdateOne) SaveX(ctx context.Context) *Stage {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StageUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StageUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StageUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := stage.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StageUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := stage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := suo.mutation.TuitionAmount(); ok {
		if err := stage.TuitionAmountValidator(v); err != nil {
			return &ValidationError{Name: "tuition_amount", err: fmt.Errorf("ent: validator failed for field \"tuition_amount\": %w", err)}
		}
	}
	if _, ok := suo.mutation.SchoolID(); suo.mutation.SchoolCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"school\"")
	}
	return nil
}

func (suo *StageUpdateOne) sqlSave(ctx context.Context) (_node *Stage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stage.Table,
			Columns: stage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: stage.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Stage.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stage.FieldID)
		for _, f := range fields {
			if !stage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stage.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stage.FieldName,
		})
	}
	if value, ok := suo.mutation.TuitionAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stage.FieldTuitionAmount,
		})
	}
	if value, ok := suo.mutation.AddedTuitionAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stage.FieldTuitionAmount,
		})
	}
	if value, ok := suo.mutation.Directory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stage.FieldDirectory,
		})
	}
	if value, ok := suo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stage.FieldActive,
		})
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stage.FieldDeletedAt,
		})
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: stage.FieldDeletedAt,
		})
	}
	if suo.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.SchoolTable,
			Columns: []string{stage.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: school.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.SchoolTable,
			Columns: []string{stage.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.ClassesTable,
			Columns: []string{stage.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedClassesIDs(); len(nodes) > 0 && !suo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.ClassesTable,
			Columns: []string{stage.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.ClassesTable,
			Columns: []string{stage.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.PaymentsTable,
			Columns: []string{stage.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tuitionpayment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !suo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.PaymentsTable,
			Columns: []string{stage.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tuitionpayment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.PaymentsTable,
			Columns: []string{stage.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tuitionpayment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.StudentsTable,
			Columns: []string{stage.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !suo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.StudentsTable,
			Columns: []string{stage.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.StudentsTable,
			Columns: []string{stage.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stage{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
