// Code generated by entc, DO NOT EDIT.

package class

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the class type in the database.
	Label = "class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeStage holds the string denoting the stage edge name in mutations.
	EdgeStage = "stage"
	// EdgeTeacher holds the string denoting the teacher edge name in mutations.
	EdgeTeacher = "teacher"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// EdgeAssignments holds the string denoting the assignments edge name in mutations.
	EdgeAssignments = "assignments"
	// EdgeAttendances holds the string denoting the attendances edge name in mutations.
	EdgeAttendances = "attendances"
	// EdgeSchedules holds the string denoting the schedules edge name in mutations.
	EdgeSchedules = "schedules"
	// EdgeCourseGrades holds the string denoting the course_grades edge name in mutations.
	EdgeCourseGrades = "course_grades"
	// Table holds the table name of the class in the database.
	Table = "classes"
	// StageTable is the table that holds the stage relation/edge.
	StageTable = "classes"
	// StageInverseTable is the table name for the Stage entity.
	// It exists in this package in order to avoid circular dependency with the "stage" package.
	StageInverseTable = "stages"
	// StageColumn is the table column denoting the stage relation/edge.
	StageColumn = "stage_classes"
	// TeacherTable is the table that holds the teacher relation/edge.
	TeacherTable = "classes"
	// TeacherInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	TeacherInverseTable = "users"
	// TeacherColumn is the table column denoting the teacher relation/edge.
	TeacherColumn = "user_classes"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "groups"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "class_group"
	// AssignmentsTable is the table that holds the assignments relation/edge.
	AssignmentsTable = "assignments"
	// AssignmentsInverseTable is the table name for the Assignment entity.
	// It exists in this package in order to avoid circular dependency with the "assignment" package.
	AssignmentsInverseTable = "assignments"
	// AssignmentsColumn is the table column denoting the assignments relation/edge.
	AssignmentsColumn = "class_assignments"
	// AttendancesTable is the table that holds the attendances relation/edge.
	AttendancesTable = "attendances"
	// AttendancesInverseTable is the table name for the Attendance entity.
	// It exists in this package in order to avoid circular dependency with the "attendance" package.
	AttendancesInverseTable = "attendances"
	// AttendancesColumn is the table column denoting the attendances relation/edge.
	AttendancesColumn = "class_attendances"
	// SchedulesTable is the table that holds the schedules relation/edge.
	SchedulesTable = "schedules"
	// SchedulesInverseTable is the table name for the Schedule entity.
	// It exists in this package in order to avoid circular dependency with the "schedule" package.
	SchedulesInverseTable = "schedules"
	// SchedulesColumn is the table column denoting the schedules relation/edge.
	SchedulesColumn = "class_schedules"
	// CourseGradesTable is the table that holds the course_grades relation/edge.
	CourseGradesTable = "course_grades"
	// CourseGradesInverseTable is the table name for the CourseGrade entity.
	// It exists in this package in order to avoid circular dependency with the "coursegrade" package.
	CourseGradesInverseTable = "course_grades"
	// CourseGradesColumn is the table column denoting the course_grades relation/edge.
	CourseGradesColumn = "class_course_grades"
)

// Columns holds all SQL columns for class fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldActive,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "classes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"stage_classes",
	"user_classes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
