// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/msal4/hassah_school_server/ent/timemixin"
)

// TimeMixin is the model entity for the TimeMixin schema.
type TimeMixin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TimeMixin) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case timemixin.FieldID:
			values[i] = new(sql.NullInt64)
		case timemixin.FieldCreatedAt, timemixin.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TimeMixin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TimeMixin fields.
func (tm *TimeMixin) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timemixin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tm.ID = int(value.Int64)
		case timemixin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tm.CreatedAt = value.Time
			}
		case timemixin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tm.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TimeMixin.
// Note that you need to call TimeMixin.Unwrap() before calling this method if this TimeMixin
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TimeMixin) Update() *TimeMixinUpdateOne {
	return (&TimeMixinClient{config: tm.config}).UpdateOne(tm)
}

// Unwrap unwraps the TimeMixin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tm *TimeMixin) Unwrap() *TimeMixin {
	tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("ent: TimeMixin is not a transactional entity")
	}
	tm.config.driver = tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TimeMixin) String() string {
	var builder strings.Builder
	builder.WriteString("TimeMixin(")
	builder.WriteString(fmt.Sprintf("id=%v", tm.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(tm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TimeMixins is a parsable slice of TimeMixin.
type TimeMixins []*TimeMixin

func (tm TimeMixins) config(cfg config) {
	for _i := range tm {
		tm[_i].config = cfg
	}
}
