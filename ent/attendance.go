// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/msal4/hassah_school_server/ent/attendance"
	"github.com/msal4/hassah_school_server/ent/class"
	"github.com/msal4/hassah_school_server/ent/user"
)

// Attendance is the model entity for the Attendance schema.
type Attendance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// State holds the value of the "state" field.
	State attendance.State `json:"state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttendanceQuery when eager-loading is set.
	Edges             AttendanceEdges `json:"edges"`
	class_attendances *int
	user_attendances  *int
}

// AttendanceEdges holds the relations/edges for other nodes in the graph.
type AttendanceEdges struct {
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// Student holds the value of the student edge.
	Student *User `json:"student,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendanceEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[0] {
		if e.Class == nil {
			// The edge class was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendanceEdges) StudentOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Student == nil {
			// The edge student was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attendance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendance.FieldID:
			values[i] = new(sql.NullInt64)
		case attendance.FieldState:
			values[i] = new(sql.NullString)
		case attendance.FieldCreatedAt, attendance.FieldUpdatedAt, attendance.FieldDate:
			values[i] = new(sql.NullTime)
		case attendance.ForeignKeys[0]: // class_attendances
			values[i] = new(sql.NullInt64)
		case attendance.ForeignKeys[1]: // user_attendances
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Attendance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attendance fields.
func (a *Attendance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case attendance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case attendance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case attendance.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				a.Date = value.Time
			}
		case attendance.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				a.State = attendance.State(value.String)
			}
		case attendance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field class_attendances", value)
			} else if value.Valid {
				a.class_attendances = new(int)
				*a.class_attendances = int(value.Int64)
			}
		case attendance.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_attendances", value)
			} else if value.Valid {
				a.user_attendances = new(int)
				*a.user_attendances = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryClass queries the "class" edge of the Attendance entity.
func (a *Attendance) QueryClass() *ClassQuery {
	return (&AttendanceClient{config: a.config}).QueryClass(a)
}

// QueryStudent queries the "student" edge of the Attendance entity.
func (a *Attendance) QueryStudent() *UserQuery {
	return (&AttendanceClient{config: a.config}).QueryStudent(a)
}

// Update returns a builder for updating this Attendance.
// Note that you need to call Attendance.Unwrap() before calling this method if this Attendance
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attendance) Update() *AttendanceUpdateOne {
	return (&AttendanceClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Attendance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attendance) Unwrap() *Attendance {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attendance is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attendance) String() string {
	var builder strings.Builder
	builder.WriteString("Attendance(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", date=")
	builder.WriteString(a.Date.Format(time.ANSIC))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", a.State))
	builder.WriteByte(')')
	return builder.String()
}

// Attendances is a parsable slice of Attendance.
type Attendances []*Attendance

func (a Attendances) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
