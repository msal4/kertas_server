// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AssignmentQuery) CollectFields(ctx context.Context, satisfies ...string) *AssignmentQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return a
}

func (a *AssignmentQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AssignmentQuery {
	return a
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (as *AssignmentSubmissionQuery) CollectFields(ctx context.Context, satisfies ...string) *AssignmentSubmissionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		as = as.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return as
}

func (as *AssignmentSubmissionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AssignmentSubmissionQuery {
	return as
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AttendanceQuery) CollectFields(ctx context.Context, satisfies ...string) *AttendanceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return a
}

func (a *AttendanceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AttendanceQuery {
	return a
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *ClassQuery) CollectFields(ctx context.Context, satisfies ...string) *ClassQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *ClassQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ClassQuery {
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cg *CourseGradeQuery) CollectFields(ctx context.Context, satisfies ...string) *CourseGradeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		cg = cg.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return cg
}

func (cg *CourseGradeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CourseGradeQuery {
	return cg
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gr *GradeQuery) CollectFields(ctx context.Context, satisfies ...string) *GradeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		gr = gr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return gr
}

func (gr *GradeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *GradeQuery {
	return gr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gr *GroupQuery) CollectFields(ctx context.Context, satisfies ...string) *GroupQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		gr = gr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return gr
}

func (gr *GroupQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *GroupQuery {
	return gr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (m *MessageQuery) CollectFields(ctx context.Context, satisfies ...string) *MessageQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		m = m.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return m
}

func (m *MessageQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MessageQuery {
	return m
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (n *NotificationQuery) CollectFields(ctx context.Context, satisfies ...string) *NotificationQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		n = n.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return n
}

func (n *NotificationQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *NotificationQuery {
	return n
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *ScheduleQuery) CollectFields(ctx context.Context, satisfies ...string) *ScheduleQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *ScheduleQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ScheduleQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SchoolQuery) CollectFields(ctx context.Context, satisfies ...string) *SchoolQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *SchoolQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *SchoolQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "stages":
			s = s.WithStages(func(query *StageQuery) {
				query.collectField(ctx, field)
			})
		case "users":
			s = s.WithUsers(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *StageQuery) CollectFields(ctx context.Context, satisfies ...string) *StageQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *StageQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *StageQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tp *TuitionPaymentQuery) CollectFields(ctx context.Context, satisfies ...string) *TuitionPaymentQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tp = tp.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tp
}

func (tp *TuitionPaymentQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TuitionPaymentQuery {
	return tp
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	return u
}
