// Code generated by entc, DO NOT EDIT.

package stage

import (
	"fmt"
	"time"

	"github.com/msal4/hassah_school_server/ent/schema"
)

const (
	// Label holds the string label denoting the stage type in the database.
	Label = "stage"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTuitionAmount holds the string denoting the tuition_amount field in the database.
	FieldTuitionAmount = "tuition_amount"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeSchool holds the string denoting the school edge name in mutations.
	EdgeSchool = "school"
	// EdgeClasses holds the string denoting the classes edge name in mutations.
	EdgeClasses = "classes"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// EdgeStudents holds the string denoting the students edge name in mutations.
	EdgeStudents = "students"
	// Table holds the table name of the stage in the database.
	Table = "stages"
	// SchoolTable is the table that holds the school relation/edge.
	SchoolTable = "stages"
	// SchoolInverseTable is the table name for the School entity.
	// It exists in this package in order to avoid circular dependency with the "school" package.
	SchoolInverseTable = "schools"
	// SchoolColumn is the table column denoting the school relation/edge.
	SchoolColumn = "school_stages"
	// ClassesTable is the table that holds the classes relation/edge.
	ClassesTable = "classes"
	// ClassesInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassesInverseTable = "classes"
	// ClassesColumn is the table column denoting the classes relation/edge.
	ClassesColumn = "stage_classes"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "tuition_payments"
	// PaymentsInverseTable is the table name for the TuitionPayment entity.
	// It exists in this package in order to avoid circular dependency with the "tuitionpayment" package.
	PaymentsInverseTable = "tuition_payments"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "stage_payments"
	// StudentsTable is the table that holds the students relation/edge.
	StudentsTable = "users"
	// StudentsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	StudentsInverseTable = "users"
	// StudentsColumn is the table column denoting the students relation/edge.
	StudentsColumn = "stage_students"
)

// Columns holds all SQL columns for stage fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldTuitionAmount,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "stages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"school_stages",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

const DefaultStatus schema.Status = "active"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s schema.Status) error {
	switch s {
	case "deleted", "disabled", "active":
		return nil
	default:
		return fmt.Errorf("stage: invalid enum value for status field: %q", s)
	}
}
