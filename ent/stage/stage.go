// Code generated by entc, DO NOT EDIT.

package stage

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the stage type in the database.
	Label = "stage"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTuitionAmount holds the string denoting the tuition_amount field in the database.
	FieldTuitionAmount = "tuition_amount"
	// FieldDirectory holds the string denoting the directory field in the database.
	FieldDirectory = "directory"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeSchool holds the string denoting the school edge name in mutations.
	EdgeSchool = "school"
	// EdgeClasses holds the string denoting the classes edge name in mutations.
	EdgeClasses = "classes"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// EdgeStudents holds the string denoting the students edge name in mutations.
	EdgeStudents = "students"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// Table holds the table name of the stage in the database.
	Table = "stages"
	// SchoolTable is the table that holds the school relation/edge.
	SchoolTable = "stages"
	// SchoolInverseTable is the table name for the School entity.
	// It exists in this package in order to avoid circular dependency with the "school" package.
	SchoolInverseTable = "schools"
	// SchoolColumn is the table column denoting the school relation/edge.
	SchoolColumn = "school_stages"
	// ClassesTable is the table that holds the classes relation/edge.
	ClassesTable = "classes"
	// ClassesInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassesInverseTable = "classes"
	// ClassesColumn is the table column denoting the classes relation/edge.
	ClassesColumn = "stage_classes"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "tuition_payments"
	// PaymentsInverseTable is the table name for the TuitionPayment entity.
	// It exists in this package in order to avoid circular dependency with the "tuitionpayment" package.
	PaymentsInverseTable = "tuition_payments"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "stage_payments"
	// StudentsTable is the table that holds the students relation/edge.
	StudentsTable = "users"
	// StudentsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	StudentsInverseTable = "users"
	// StudentsColumn is the table column denoting the students relation/edge.
	StudentsColumn = "stage_students"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "notifications"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "notifications"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "stage_notifications"
)

// Columns holds all SQL columns for stage fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldTuitionAmount,
	FieldDirectory,
	FieldActive,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "stages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"school_stages",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TuitionAmountValidator is a validator for the "tuition_amount" field. It is called by the builders before save.
	TuitionAmountValidator func(int) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
