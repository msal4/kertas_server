// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/msal4/hassah_school_server/ent/class"
	"github.com/msal4/hassah_school_server/ent/notification"
	"github.com/msal4/hassah_school_server/ent/school"
	"github.com/msal4/hassah_school_server/ent/stage"
	"github.com/msal4/hassah_school_server/ent/tuitionpayment"
	"github.com/msal4/hassah_school_server/ent/user"
)

// StageCreate is the builder for creating a Stage entity.
type StageCreate struct {
	config
	mutation *StageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *StageCreate) SetCreatedAt(t time.Time) *StageCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StageCreate) SetNillableCreatedAt(t *time.Time) *StageCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StageCreate) SetUpdatedAt(t time.Time) *StageCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StageCreate) SetNillableUpdatedAt(t *time.Time) *StageCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *StageCreate) SetName(s string) *StageCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetTuitionAmount sets the "tuition_amount" field.
func (sc *StageCreate) SetTuitionAmount(i int) *StageCreate {
	sc.mutation.SetTuitionAmount(i)
	return sc
}

// SetDirectory sets the "directory" field.
func (sc *StageCreate) SetDirectory(s string) *StageCreate {
	sc.mutation.SetDirectory(s)
	return sc
}

// SetActive sets the "active" field.
func (sc *StageCreate) SetActive(b bool) *StageCreate {
	sc.mutation.SetActive(b)
	return sc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (sc *StageCreate) SetNillableActive(b *bool) *StageCreate {
	if b != nil {
		sc.SetActive(*b)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *StageCreate) SetDeletedAt(t time.Time) *StageCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *StageCreate) SetNillableDeletedAt(t *time.Time) *StageCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StageCreate) SetID(u uuid.UUID) *StageCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetSchoolID sets the "school" edge to the School entity by ID.
func (sc *StageCreate) SetSchoolID(id uuid.UUID) *StageCreate {
	sc.mutation.SetSchoolID(id)
	return sc
}

// SetSchool sets the "school" edge to the School entity.
func (sc *StageCreate) SetSchool(s *School) *StageCreate {
	return sc.SetSchoolID(s.ID)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (sc *StageCreate) AddClassIDs(ids ...uuid.UUID) *StageCreate {
	sc.mutation.AddClassIDs(ids...)
	return sc
}

// AddClasses adds the "classes" edges to the Class entity.
func (sc *StageCreate) AddClasses(c ...*Class) *StageCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddClassIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the TuitionPayment entity by IDs.
func (sc *StageCreate) AddPaymentIDs(ids ...uuid.UUID) *StageCreate {
	sc.mutation.AddPaymentIDs(ids...)
	return sc
}

// AddPayments adds the "payments" edges to the TuitionPayment entity.
func (sc *StageCreate) AddPayments(t ...*TuitionPayment) *StageCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddPaymentIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the User entity by IDs.
func (sc *StageCreate) AddStudentIDs(ids ...uuid.UUID) *StageCreate {
	sc.mutation.AddStudentIDs(ids...)
	return sc
}

// AddStudents adds the "students" edges to the User entity.
func (sc *StageCreate) AddStudents(u ...*User) *StageCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sc.AddStudentIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (sc *StageCreate) AddNotificationIDs(ids ...uuid.UUID) *StageCreate {
	sc.mutation.AddNotificationIDs(ids...)
	return sc
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (sc *StageCreate) AddNotifications(n ...*Notification) *StageCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return sc.AddNotificationIDs(ids...)
}

// Mutation returns the StageMutation object of the builder.
func (sc *StageCreate) Mutation() *StageMutation {
	return sc.mutation
}

// Save creates the Stage in the database.
func (sc *StageCreate) Save(ctx context.Context) (*Stage, error) {
	var (
		err  error
		node *Stage
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StageCreate) SaveX(ctx context.Context) *Stage {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StageCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StageCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StageCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := stage.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := stage.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Active(); !ok {
		v := stage.DefaultActive
		sc.mutation.SetActive(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := stage.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StageCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := stage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.TuitionAmount(); !ok {
		return &ValidationError{Name: "tuition_amount", err: errors.New(`ent: missing required field "tuition_amount"`)}
	}
	if v, ok := sc.mutation.TuitionAmount(); ok {
		if err := stage.TuitionAmountValidator(v); err != nil {
			return &ValidationError{Name: "tuition_amount", err: fmt.Errorf(`ent: validator failed for field "tuition_amount": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Directory(); !ok {
		return &ValidationError{Name: "directory", err: errors.New(`ent: missing required field "directory"`)}
	}
	if _, ok := sc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "active"`)}
	}
	if _, ok := sc.mutation.SchoolID(); !ok {
		return &ValidationError{Name: "school", err: errors.New("ent: missing required edge \"school\"")}
	}
	return nil
}

func (sc *StageCreate) sqlSave(ctx context.Context) (*Stage, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (sc *StageCreate) createSpec() (*Stage, *sqlgraph.CreateSpec) {
	var (
		_node = &Stage{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: stage.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stage.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stage.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stage.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.TuitionAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stage.FieldTuitionAmount,
		})
		_node.TuitionAmount = value
	}
	if value, ok := sc.mutation.Directory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stage.FieldDirectory,
		})
		_node.Directory = value
	}
	if value, ok := sc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stage.FieldActive,
		})
		_node.Active = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stage.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := sc.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.SchoolTable,
			Columns: []string{stage.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.school_stages = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.ClassesTable,
			Columns: []string{stage.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.PaymentsTable,
			Columns: []string{stage.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tuitionpayment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.StudentsTable,
			Columns: []string{stage.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stage.NotificationsTable,
			Columns: []string{stage.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Stage.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sc *StageCreate) OnConflict(opts ...sql.ConflictOption) *StageUpsertOne {
	sc.conflict = opts
	return &StageUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Stage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *StageCreate) OnConflictColumns(columns ...string) *StageUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StageUpsertOne{
		create: sc,
	}
}

type (
	// StageUpsertOne is the builder for "upsert"-ing
	//  one Stage node.
	StageUpsertOne struct {
		create *StageCreate
	}

	// StageUpsert is the "OnConflict" setter.
	StageUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *StageUpsert) SetCreatedAt(v time.Time) *StageUpsert {
	u.Set(stage.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StageUpsert) UpdateCreatedAt() *StageUpsert {
	u.SetExcluded(stage.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StageUpsert) SetUpdatedAt(v time.Time) *StageUpsert {
	u.Set(stage.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StageUpsert) UpdateUpdatedAt() *StageUpsert {
	u.SetExcluded(stage.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *StageUpsert) SetName(v string) *StageUpsert {
	u.Set(stage.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StageUpsert) UpdateName() *StageUpsert {
	u.SetExcluded(stage.FieldName)
	return u
}

// SetTuitionAmount sets the "tuition_amount" field.
func (u *StageUpsert) SetTuitionAmount(v int) *StageUpsert {
	u.Set(stage.FieldTuitionAmount, v)
	return u
}

// UpdateTuitionAmount sets the "tuition_amount" field to the value that was provided on create.
func (u *StageUpsert) UpdateTuitionAmount() *StageUpsert {
	u.SetExcluded(stage.FieldTuitionAmount)
	return u
}

// SetDirectory sets the "directory" field.
func (u *StageUpsert) SetDirectory(v string) *StageUpsert {
	u.Set(stage.FieldDirectory, v)
	return u
}

// UpdateDirectory sets the "directory" field to the value that was provided on create.
func (u *StageUpsert) UpdateDirectory() *StageUpsert {
	u.SetExcluded(stage.FieldDirectory)
	return u
}

// SetActive sets the "active" field.
func (u *StageUpsert) SetActive(v bool) *StageUpsert {
	u.Set(stage.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *StageUpsert) UpdateActive() *StageUpsert {
	u.SetExcluded(stage.FieldActive)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StageUpsert) SetDeletedAt(v time.Time) *StageUpsert {
	u.Set(stage.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StageUpsert) UpdateDeletedAt() *StageUpsert {
	u.SetExcluded(stage.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StageUpsert) ClearDeletedAt() *StageUpsert {
	u.SetNull(stage.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Stage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(stage.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StageUpsertOne) UpdateNewValues() *StageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(stage.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Stage.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *StageUpsertOne) Ignore() *StageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StageUpsertOne) DoNothing() *StageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StageCreate.OnConflict
// documentation for more info.
func (u *StageUpsertOne) Update(set func(*StageUpsert)) *StageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StageUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StageUpsertOne) SetCreatedAt(v time.Time) *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StageUpsertOne) UpdateCreatedAt() *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StageUpsertOne) SetUpdatedAt(v time.Time) *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StageUpsertOne) UpdateUpdatedAt() *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *StageUpsertOne) SetName(v string) *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StageUpsertOne) UpdateName() *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.UpdateName()
	})
}

// SetTuitionAmount sets the "tuition_amount" field.
func (u *StageUpsertOne) SetTuitionAmount(v int) *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.SetTuitionAmount(v)
	})
}

// UpdateTuitionAmount sets the "tuition_amount" field to the value that was provided on create.
func (u *StageUpsertOne) UpdateTuitionAmount() *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.UpdateTuitionAmount()
	})
}

// SetDirectory sets the "directory" field.
func (u *StageUpsertOne) SetDirectory(v string) *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.SetDirectory(v)
	})
}

// UpdateDirectory sets the "directory" field to the value that was provided on create.
func (u *StageUpsertOne) UpdateDirectory() *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.UpdateDirectory()
	})
}

// SetActive sets the "active" field.
func (u *StageUpsertOne) SetActive(v bool) *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *StageUpsertOne) UpdateActive() *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.UpdateActive()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StageUpsertOne) SetDeletedAt(v time.Time) *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StageUpsertOne) UpdateDeletedAt() *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StageUpsertOne) ClearDeletedAt() *StageUpsertOne {
	return u.Update(func(s *StageUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *StageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StageUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: StageUpsertOne.ID is not supported by MySQL driver. Use StageUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StageUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StageCreateBulk is the builder for creating many Stage entities in bulk.
type StageCreateBulk struct {
	config
	builders []*StageCreate
	conflict []sql.ConflictOption
}

// Save creates the Stage entities in the database.
func (scb *StageCreateBulk) Save(ctx context.Context) ([]*Stage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stage, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StageCreateBulk) SaveX(ctx context.Context) []*Stage {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StageCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StageCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Stage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scb *StageCreateBulk) OnConflict(opts ...sql.ConflictOption) *StageUpsertBulk {
	scb.conflict = opts
	return &StageUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Stage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *StageCreateBulk) OnConflictColumns(columns ...string) *StageUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StageUpsertBulk{
		create: scb,
	}
}

// StageUpsertBulk is the builder for "upsert"-ing
// a bulk of Stage nodes.
type StageUpsertBulk struct {
	create *StageCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Stage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(stage.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StageUpsertBulk) UpdateNewValues() *StageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(stage.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Stage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *StageUpsertBulk) Ignore() *StageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StageUpsertBulk) DoNothing() *StageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StageCreateBulk.OnConflict
// documentation for more info.
func (u *StageUpsertBulk) Update(set func(*StageUpsert)) *StageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StageUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StageUpsertBulk) SetCreatedAt(v time.Time) *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StageUpsertBulk) UpdateCreatedAt() *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StageUpsertBulk) SetUpdatedAt(v time.Time) *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StageUpsertBulk) UpdateUpdatedAt() *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *StageUpsertBulk) SetName(v string) *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StageUpsertBulk) UpdateName() *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.UpdateName()
	})
}

// SetTuitionAmount sets the "tuition_amount" field.
func (u *StageUpsertBulk) SetTuitionAmount(v int) *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.SetTuitionAmount(v)
	})
}

// UpdateTuitionAmount sets the "tuition_amount" field to the value that was provided on create.
func (u *StageUpsertBulk) UpdateTuitionAmount() *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.UpdateTuitionAmount()
	})
}

// SetDirectory sets the "directory" field.
func (u *StageUpsertBulk) SetDirectory(v string) *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.SetDirectory(v)
	})
}

// UpdateDirectory sets the "directory" field to the value that was provided on create.
func (u *StageUpsertBulk) UpdateDirectory() *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.UpdateDirectory()
	})
}

// SetActive sets the "active" field.
func (u *StageUpsertBulk) SetActive(v bool) *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *StageUpsertBulk) UpdateActive() *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.UpdateActive()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StageUpsertBulk) SetDeletedAt(v time.Time) *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StageUpsertBulk) UpdateDeletedAt() *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StageUpsertBulk) ClearDeletedAt() *StageUpsertBulk {
	return u.Update(func(s *StageUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *StageUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
